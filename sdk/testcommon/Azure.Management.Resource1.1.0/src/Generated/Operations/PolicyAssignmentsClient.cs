// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.Threading;
using System.Threading.Tasks;
using Azure;
using Azure.Core;
using Azure.Core.Pipeline;
using Azure.Management.Resource.Models;

namespace Azure.Management.Resource
{
    /// <summary> The PolicyAssignments service client. </summary>
    public partial class PolicyAssignmentsClient
    {
        private readonly ClientDiagnostics _clientDiagnostics;
        private readonly HttpPipeline _pipeline;
        internal PolicyAssignmentsRestClient RestClient { get; }
        /// <summary> Initializes a new instance of PolicyAssignmentsClient for mocking. </summary>
        protected PolicyAssignmentsClient()
        {
        }

        /// <summary> Initializes a new instance of PolicyAssignmentsClient. </summary>
        public PolicyAssignmentsClient(string subscriptionId, TokenCredential tokenCredential, ResourceManagementClientOptions options = null)
        {
            options ??= new ResourceManagementClientOptions();
            _clientDiagnostics = new ClientDiagnostics(options);
            _pipeline = ManagementPipelineBuilder.Build(tokenCredential, options);
            RestClient = new PolicyAssignmentsRestClient(_clientDiagnostics, _pipeline, subscriptionId: subscriptionId, apiVersion: options.Version);
        }

        /// <summary> Delete policy assignment. </summary>
        /// <param name="scope"> Scope. </param>
        /// <param name="policyAssignmentName"> Policy assignment name. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        public virtual async Task<Response<PolicyAssignment>> DeleteAsync(string scope, string policyAssignmentName, CancellationToken cancellationToken = default)
        {
            return await RestClient.DeleteAsync(scope, policyAssignmentName, cancellationToken).ConfigureAwait(false);
        }

        /// <summary> Delete policy assignment. </summary>
        /// <param name="scope"> Scope. </param>
        /// <param name="policyAssignmentName"> Policy assignment name. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        public virtual Response<PolicyAssignment> Delete(string scope, string policyAssignmentName, CancellationToken cancellationToken = default)
        {
            return RestClient.Delete(scope, policyAssignmentName, cancellationToken);
        }

        /// <summary> Create policy assignment. </summary>
        /// <param name="scope"> Scope. </param>
        /// <param name="policyAssignmentName"> Policy assignment name. </param>
        /// <param name="properties"> Gets or sets the policy assignment properties. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        public virtual async Task<Response<PolicyAssignment>> CreateAsync(string scope, string policyAssignmentName, PolicyAssignmentProperties properties = null, CancellationToken cancellationToken = default)
        {
            return await RestClient.CreateAsync(scope, policyAssignmentName, properties, cancellationToken).ConfigureAwait(false);
        }

        /// <summary> Create policy assignment. </summary>
        /// <param name="scope"> Scope. </param>
        /// <param name="policyAssignmentName"> Policy assignment name. </param>
        /// <param name="properties"> Gets or sets the policy assignment properties. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        public virtual Response<PolicyAssignment> Create(string scope, string policyAssignmentName, PolicyAssignmentProperties properties = null, CancellationToken cancellationToken = default)
        {
            return RestClient.Create(scope, policyAssignmentName, properties, cancellationToken);
        }

        /// <summary> Get single policy assignment. </summary>
        /// <param name="scope"> Scope. </param>
        /// <param name="policyAssignmentName"> Policy assignment name. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        public virtual async Task<Response<PolicyAssignment>> GetAsync(string scope, string policyAssignmentName, CancellationToken cancellationToken = default)
        {
            return await RestClient.GetAsync(scope, policyAssignmentName, cancellationToken).ConfigureAwait(false);
        }

        /// <summary> Get single policy assignment. </summary>
        /// <param name="scope"> Scope. </param>
        /// <param name="policyAssignmentName"> Policy assignment name. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        public virtual Response<PolicyAssignment> Get(string scope, string policyAssignmentName, CancellationToken cancellationToken = default)
        {
            return RestClient.Get(scope, policyAssignmentName, cancellationToken);
        }

        /// <summary> Delete policy assignment. </summary>
        /// <param name="policyAssignmentId"> Policy assignment Id. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        public virtual async Task<Response<PolicyAssignment>> DeleteByIdAsync(string policyAssignmentId, CancellationToken cancellationToken = default)
        {
            return await RestClient.DeleteByIdAsync(policyAssignmentId, cancellationToken).ConfigureAwait(false);
        }

        /// <summary> Delete policy assignment. </summary>
        /// <param name="policyAssignmentId"> Policy assignment Id. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        public virtual Response<PolicyAssignment> DeleteById(string policyAssignmentId, CancellationToken cancellationToken = default)
        {
            return RestClient.DeleteById(policyAssignmentId, cancellationToken);
        }

        /// <summary> Create policy assignment by Id. </summary>
        /// <param name="policyAssignmentId"> Policy assignment Id. </param>
        /// <param name="properties"> Gets or sets the policy assignment properties. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        public virtual async Task<Response<PolicyAssignment>> CreateByIdAsync(string policyAssignmentId, PolicyAssignmentProperties properties = null, CancellationToken cancellationToken = default)
        {
            return await RestClient.CreateByIdAsync(policyAssignmentId, properties, cancellationToken).ConfigureAwait(false);
        }

        /// <summary> Create policy assignment by Id. </summary>
        /// <param name="policyAssignmentId"> Policy assignment Id. </param>
        /// <param name="properties"> Gets or sets the policy assignment properties. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        public virtual Response<PolicyAssignment> CreateById(string policyAssignmentId, PolicyAssignmentProperties properties = null, CancellationToken cancellationToken = default)
        {
            return RestClient.CreateById(policyAssignmentId, properties, cancellationToken);
        }

        /// <summary> Get single policy assignment. </summary>
        /// <param name="policyAssignmentId"> Policy assignment Id. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        public virtual async Task<Response<PolicyAssignment>> GetByIdAsync(string policyAssignmentId, CancellationToken cancellationToken = default)
        {
            return await RestClient.GetByIdAsync(policyAssignmentId, cancellationToken).ConfigureAwait(false);
        }

        /// <summary> Get single policy assignment. </summary>
        /// <param name="policyAssignmentId"> Policy assignment Id. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        public virtual Response<PolicyAssignment> GetById(string policyAssignmentId, CancellationToken cancellationToken = default)
        {
            return RestClient.GetById(policyAssignmentId, cancellationToken);
        }

        /// <summary> Gets policy assignments of the resource. </summary>
        /// <param name="resourceGroupName"> The name of the resource group. </param>
        /// <param name="resourceProviderNamespace"> The name of the resource provider. </param>
        /// <param name="parentResourcePath"> The parent resource path. </param>
        /// <param name="resourceType"> The resource type. </param>
        /// <param name="resourceName"> The resource name. </param>
        /// <param name="filter"> The filter to apply on the operation. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        public virtual AsyncPageable<PolicyAssignment> ListForResourceAsync(string resourceGroupName, string resourceProviderNamespace, string parentResourcePath, string resourceType, string resourceName, string filter = null, CancellationToken cancellationToken = default)
        {
            if (resourceGroupName == null)
            {
                throw new ArgumentNullException(nameof(resourceGroupName));
            }
            if (resourceProviderNamespace == null)
            {
                throw new ArgumentNullException(nameof(resourceProviderNamespace));
            }
            if (parentResourcePath == null)
            {
                throw new ArgumentNullException(nameof(parentResourcePath));
            }
            if (resourceType == null)
            {
                throw new ArgumentNullException(nameof(resourceType));
            }
            if (resourceName == null)
            {
                throw new ArgumentNullException(nameof(resourceName));
            }

            async Task<Page<PolicyAssignment>> FirstPageFunc(int? pageSizeHint)
            {
                var response = await RestClient.ListForResourceAsync(resourceGroupName, resourceProviderNamespace, parentResourcePath, resourceType, resourceName, filter, cancellationToken).ConfigureAwait(false);
                return Page.FromValues(response.Value.Value, response.Value.NextLink, response.GetRawResponse());
            }
            async Task<Page<PolicyAssignment>> NextPageFunc(string nextLink, int? pageSizeHint)
            {
                var response = await RestClient.ListForResourceNextPageAsync(nextLink, resourceGroupName, resourceProviderNamespace, parentResourcePath, resourceType, resourceName, filter, cancellationToken).ConfigureAwait(false);
                return Page.FromValues(response.Value.Value, response.Value.NextLink, response.GetRawResponse());
            }
            return PageableHelpers.CreateAsyncEnumerable(FirstPageFunc, NextPageFunc);
        }

        /// <summary> Gets policy assignments of the resource. </summary>
        /// <param name="resourceGroupName"> The name of the resource group. </param>
        /// <param name="resourceProviderNamespace"> The name of the resource provider. </param>
        /// <param name="parentResourcePath"> The parent resource path. </param>
        /// <param name="resourceType"> The resource type. </param>
        /// <param name="resourceName"> The resource name. </param>
        /// <param name="filter"> The filter to apply on the operation. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        public virtual Pageable<PolicyAssignment> ListForResource(string resourceGroupName, string resourceProviderNamespace, string parentResourcePath, string resourceType, string resourceName, string filter = null, CancellationToken cancellationToken = default)
        {
            if (resourceGroupName == null)
            {
                throw new ArgumentNullException(nameof(resourceGroupName));
            }
            if (resourceProviderNamespace == null)
            {
                throw new ArgumentNullException(nameof(resourceProviderNamespace));
            }
            if (parentResourcePath == null)
            {
                throw new ArgumentNullException(nameof(parentResourcePath));
            }
            if (resourceType == null)
            {
                throw new ArgumentNullException(nameof(resourceType));
            }
            if (resourceName == null)
            {
                throw new ArgumentNullException(nameof(resourceName));
            }

            Page<PolicyAssignment> FirstPageFunc(int? pageSizeHint)
            {
                var response = RestClient.ListForResource(resourceGroupName, resourceProviderNamespace, parentResourcePath, resourceType, resourceName, filter, cancellationToken);
                return Page.FromValues(response.Value.Value, response.Value.NextLink, response.GetRawResponse());
            }
            Page<PolicyAssignment> NextPageFunc(string nextLink, int? pageSizeHint)
            {
                var response = RestClient.ListForResourceNextPage(nextLink, resourceGroupName, resourceProviderNamespace, parentResourcePath, resourceType, resourceName, filter, cancellationToken);
                return Page.FromValues(response.Value.Value, response.Value.NextLink, response.GetRawResponse());
            }
            return PageableHelpers.CreateEnumerable(FirstPageFunc, NextPageFunc);
        }

        /// <summary> Gets policy assignments of the resource group. </summary>
        /// <param name="resourceGroupName"> Resource group name. </param>
        /// <param name="filter"> The filter to apply on the operation. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        public virtual AsyncPageable<PolicyAssignment> ListForResourceGroupAsync(string resourceGroupName, string filter = null, CancellationToken cancellationToken = default)
        {
            if (resourceGroupName == null)
            {
                throw new ArgumentNullException(nameof(resourceGroupName));
            }

            async Task<Page<PolicyAssignment>> FirstPageFunc(int? pageSizeHint)
            {
                var response = await RestClient.ListForResourceGroupAsync(resourceGroupName, filter, cancellationToken).ConfigureAwait(false);
                return Page.FromValues(response.Value.Value, response.Value.NextLink, response.GetRawResponse());
            }
            async Task<Page<PolicyAssignment>> NextPageFunc(string nextLink, int? pageSizeHint)
            {
                var response = await RestClient.ListForResourceGroupNextPageAsync(nextLink, resourceGroupName, filter, cancellationToken).ConfigureAwait(false);
                return Page.FromValues(response.Value.Value, response.Value.NextLink, response.GetRawResponse());
            }
            return PageableHelpers.CreateAsyncEnumerable(FirstPageFunc, NextPageFunc);
        }

        /// <summary> Gets policy assignments of the resource group. </summary>
        /// <param name="resourceGroupName"> Resource group name. </param>
        /// <param name="filter"> The filter to apply on the operation. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        public virtual Pageable<PolicyAssignment> ListForResourceGroup(string resourceGroupName, string filter = null, CancellationToken cancellationToken = default)
        {
            if (resourceGroupName == null)
            {
                throw new ArgumentNullException(nameof(resourceGroupName));
            }

            Page<PolicyAssignment> FirstPageFunc(int? pageSizeHint)
            {
                var response = RestClient.ListForResourceGroup(resourceGroupName, filter, cancellationToken);
                return Page.FromValues(response.Value.Value, response.Value.NextLink, response.GetRawResponse());
            }
            Page<PolicyAssignment> NextPageFunc(string nextLink, int? pageSizeHint)
            {
                var response = RestClient.ListForResourceGroupNextPage(nextLink, resourceGroupName, filter, cancellationToken);
                return Page.FromValues(response.Value.Value, response.Value.NextLink, response.GetRawResponse());
            }
            return PageableHelpers.CreateEnumerable(FirstPageFunc, NextPageFunc);
        }

        /// <summary> Gets policy assignments of the subscription. </summary>
        /// <param name="filter"> The filter to apply on the operation. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        public virtual AsyncPageable<PolicyAssignment> ListAsync(string filter = null, CancellationToken cancellationToken = default)
        {
            async Task<Page<PolicyAssignment>> FirstPageFunc(int? pageSizeHint)
            {
                var response = await RestClient.ListAsync(filter, cancellationToken).ConfigureAwait(false);
                return Page.FromValues(response.Value.Value, response.Value.NextLink, response.GetRawResponse());
            }
            async Task<Page<PolicyAssignment>> NextPageFunc(string nextLink, int? pageSizeHint)
            {
                var response = await RestClient.ListNextPageAsync(nextLink, filter, cancellationToken).ConfigureAwait(false);
                return Page.FromValues(response.Value.Value, response.Value.NextLink, response.GetRawResponse());
            }
            return PageableHelpers.CreateAsyncEnumerable(FirstPageFunc, NextPageFunc);
        }

        /// <summary> Gets policy assignments of the subscription. </summary>
        /// <param name="filter"> The filter to apply on the operation. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        public virtual Pageable<PolicyAssignment> List(string filter = null, CancellationToken cancellationToken = default)
        {
            Page<PolicyAssignment> FirstPageFunc(int? pageSizeHint)
            {
                var response = RestClient.List(filter, cancellationToken);
                return Page.FromValues(response.Value.Value, response.Value.NextLink, response.GetRawResponse());
            }
            Page<PolicyAssignment> NextPageFunc(string nextLink, int? pageSizeHint)
            {
                var response = RestClient.ListNextPage(nextLink, filter, cancellationToken);
                return Page.FromValues(response.Value.Value, response.Value.NextLink, response.GetRawResponse());
            }
            return PageableHelpers.CreateEnumerable(FirstPageFunc, NextPageFunc);
        }

        /// <summary> Gets policy assignments of the scope. </summary>
        /// <param name="scope"> Scope. </param>
        /// <param name="filter"> The filter to apply on the operation. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        public virtual AsyncPageable<PolicyAssignment> ListForScopeAsync(string scope, string filter = null, CancellationToken cancellationToken = default)
        {
            if (scope == null)
            {
                throw new ArgumentNullException(nameof(scope));
            }

            async Task<Page<PolicyAssignment>> FirstPageFunc(int? pageSizeHint)
            {
                var response = await RestClient.ListForScopeAsync(scope, filter, cancellationToken).ConfigureAwait(false);
                return Page.FromValues(response.Value.Value, response.Value.NextLink, response.GetRawResponse());
            }
            async Task<Page<PolicyAssignment>> NextPageFunc(string nextLink, int? pageSizeHint)
            {
                var response = await RestClient.ListForScopeNextPageAsync(nextLink, scope, filter, cancellationToken).ConfigureAwait(false);
                return Page.FromValues(response.Value.Value, response.Value.NextLink, response.GetRawResponse());
            }
            return PageableHelpers.CreateAsyncEnumerable(FirstPageFunc, NextPageFunc);
        }

        /// <summary> Gets policy assignments of the scope. </summary>
        /// <param name="scope"> Scope. </param>
        /// <param name="filter"> The filter to apply on the operation. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        public virtual Pageable<PolicyAssignment> ListForScope(string scope, string filter = null, CancellationToken cancellationToken = default)
        {
            if (scope == null)
            {
                throw new ArgumentNullException(nameof(scope));
            }

            Page<PolicyAssignment> FirstPageFunc(int? pageSizeHint)
            {
                var response = RestClient.ListForScope(scope, filter, cancellationToken);
                return Page.FromValues(response.Value.Value, response.Value.NextLink, response.GetRawResponse());
            }
            Page<PolicyAssignment> NextPageFunc(string nextLink, int? pageSizeHint)
            {
                var response = RestClient.ListForScopeNextPage(nextLink, scope, filter, cancellationToken);
                return Page.FromValues(response.Value.Value, response.Value.NextLink, response.GetRawResponse());
            }
            return PageableHelpers.CreateEnumerable(FirstPageFunc, NextPageFunc);
        }
    }
}

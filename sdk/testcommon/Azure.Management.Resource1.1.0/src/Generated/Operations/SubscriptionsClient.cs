// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.Threading;
using System.Threading.Tasks;
using Azure;
using Azure.Core;
using Azure.Core.Pipeline;
using Azure.Management.Resource.Models;

namespace Azure.Management.Resource
{
    /// <summary> The Subscriptions service client. </summary>
    public partial class SubscriptionsClient
    {
        private readonly ClientDiagnostics _clientDiagnostics;
        private readonly HttpPipeline _pipeline;
        internal SubscriptionsRestClient RestClient { get; }
        /// <summary> Initializes a new instance of SubscriptionsClient for mocking. </summary>
        protected SubscriptionsClient()
        {
        }

        /// <summary> Initializes a new instance of SubscriptionsClient. </summary>
        public SubscriptionsClient(TokenCredential tokenCredential, ResourceManagementClientOptions options = null)
        {
            options ??= new ResourceManagementClientOptions();
            _clientDiagnostics = new ClientDiagnostics(options);
            _pipeline = ManagementPipelineBuilder.Build(tokenCredential, options);
            RestClient = new SubscriptionsRestClient(_clientDiagnostics, _pipeline, apiVersion: options.Version);
        }

        /// <summary> Gets details about particular subscription. </summary>
        /// <param name="subscriptionId"> Id of the subscription. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        public virtual async Task<Response<Subscription>> GetAsync(string subscriptionId, CancellationToken cancellationToken = default)
        {
            return await RestClient.GetAsync(subscriptionId, cancellationToken).ConfigureAwait(false);
        }

        /// <summary> Gets details about particular subscription. </summary>
        /// <param name="subscriptionId"> Id of the subscription. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        public virtual Response<Subscription> Get(string subscriptionId, CancellationToken cancellationToken = default)
        {
            return RestClient.Get(subscriptionId, cancellationToken);
        }

        /// <summary> Gets a list of the subscription locations. </summary>
        /// <param name="subscriptionId"> Id of the subscription. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        public virtual AsyncPageable<Location> ListLocationsAsync(string subscriptionId, CancellationToken cancellationToken = default)
        {
            if (subscriptionId == null)
            {
                throw new ArgumentNullException(nameof(subscriptionId));
            }

            async Task<Page<Location>> FirstPageFunc(int? pageSizeHint)
            {
                var response = await RestClient.ListLocationsAsync(subscriptionId, cancellationToken).ConfigureAwait(false);
                return Page.FromValues(response.Value.Value, null, response.GetRawResponse());
            }
            async Task<Page<Location>> NextPageFunc(string nextLink, int? pageSizeHint)
            {
                var response = await RestClient.ListLocationsNextPageAsync(nextLink, subscriptionId, cancellationToken).ConfigureAwait(false);
                return Page.FromValues(response.Value.Value, null, response.GetRawResponse());
            }
            return PageableHelpers.CreateAsyncEnumerable(FirstPageFunc, NextPageFunc);
        }

        /// <summary> Gets a list of the subscription locations. </summary>
        /// <param name="subscriptionId"> Id of the subscription. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        public virtual Pageable<Location> ListLocations(string subscriptionId, CancellationToken cancellationToken = default)
        {
            if (subscriptionId == null)
            {
                throw new ArgumentNullException(nameof(subscriptionId));
            }

            Page<Location> FirstPageFunc(int? pageSizeHint)
            {
                var response = RestClient.ListLocations(subscriptionId, cancellationToken);
                return Page.FromValues(response.Value.Value, null, response.GetRawResponse());
            }
            Page<Location> NextPageFunc(string nextLink, int? pageSizeHint)
            {
                var response = RestClient.ListLocationsNextPage(nextLink, subscriptionId, cancellationToken);
                return Page.FromValues(response.Value.Value, null, response.GetRawResponse());
            }
            return PageableHelpers.CreateEnumerable(FirstPageFunc, NextPageFunc);
        }

        /// <summary> Gets a list of the subscriptionIds. </summary>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        public virtual AsyncPageable<Subscription> ListAsync(CancellationToken cancellationToken = default)
        {
            async Task<Page<Subscription>> FirstPageFunc(int? pageSizeHint)
            {
                var response = await RestClient.ListAsync(cancellationToken).ConfigureAwait(false);
                return Page.FromValues(response.Value.Value, response.Value.NextLink, response.GetRawResponse());
            }
            async Task<Page<Subscription>> NextPageFunc(string nextLink, int? pageSizeHint)
            {
                var response = await RestClient.ListNextPageAsync(nextLink, cancellationToken).ConfigureAwait(false);
                return Page.FromValues(response.Value.Value, response.Value.NextLink, response.GetRawResponse());
            }
            return PageableHelpers.CreateAsyncEnumerable(FirstPageFunc, NextPageFunc);
        }

        /// <summary> Gets a list of the subscriptionIds. </summary>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        public virtual Pageable<Subscription> List(CancellationToken cancellationToken = default)
        {
            Page<Subscription> FirstPageFunc(int? pageSizeHint)
            {
                var response = RestClient.List(cancellationToken);
                return Page.FromValues(response.Value.Value, response.Value.NextLink, response.GetRawResponse());
            }
            Page<Subscription> NextPageFunc(string nextLink, int? pageSizeHint)
            {
                var response = RestClient.ListNextPage(nextLink, cancellationToken);
                return Page.FromValues(response.Value.Value, response.Value.NextLink, response.GetRawResponse());
            }
            return PageableHelpers.CreateEnumerable(FirstPageFunc, NextPageFunc);
        }
    }
}

// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System.Threading;
using System.Threading.Tasks;
using Azure;
using Azure.Core;
using Azure.Core.Pipeline;
using Azure.Management.Resource.Models;

namespace Azure.Management.Resource
{
    /// <summary> The PolicyDefinitions service client. </summary>
    public partial class PolicyDefinitionsClient
    {
        private readonly ClientDiagnostics _clientDiagnostics;
        private readonly HttpPipeline _pipeline;
        internal PolicyDefinitionsRestClient RestClient { get; }
        /// <summary> Initializes a new instance of PolicyDefinitionsClient for mocking. </summary>
        protected PolicyDefinitionsClient()
        {
        }

        /// <summary> Initializes a new instance of PolicyDefinitionsClient. </summary>
        public PolicyDefinitionsClient(string subscriptionId, TokenCredential tokenCredential, ResourceManagementClientOptions options = null)
        {
            options ??= new ResourceManagementClientOptions();
            _clientDiagnostics = new ClientDiagnostics(options);
            _pipeline = ManagementPipelineBuilder.Build(tokenCredential, options);
            RestClient = new PolicyDefinitionsRestClient(_clientDiagnostics, _pipeline, subscriptionId: subscriptionId, apiVersion: options.Version);
        }

        /// <summary> Create or update policy definition. </summary>
        /// <param name="policyDefinitionName"> The policy definition name. </param>
        /// <param name="properties"> Gets or sets the policy definition properties. </param>
        /// <param name="name"> Gets or sets the policy definition name. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        public virtual async Task<Response<PolicyDefinition>> CreateOrUpdateAsync(string policyDefinitionName, PolicyDefinitionProperties properties = null, string name = null, CancellationToken cancellationToken = default)
        {
            return await RestClient.CreateOrUpdateAsync(policyDefinitionName, properties, name, cancellationToken).ConfigureAwait(false);
        }

        /// <summary> Create or update policy definition. </summary>
        /// <param name="policyDefinitionName"> The policy definition name. </param>
        /// <param name="properties"> Gets or sets the policy definition properties. </param>
        /// <param name="name"> Gets or sets the policy definition name. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        public virtual Response<PolicyDefinition> CreateOrUpdate(string policyDefinitionName, PolicyDefinitionProperties properties = null, string name = null, CancellationToken cancellationToken = default)
        {
            return RestClient.CreateOrUpdate(policyDefinitionName, properties, name, cancellationToken);
        }

        /// <summary> Gets policy definition. </summary>
        /// <param name="policyDefinitionName"> The policy definition name. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        public virtual async Task<Response<PolicyDefinition>> GetAsync(string policyDefinitionName, CancellationToken cancellationToken = default)
        {
            return await RestClient.GetAsync(policyDefinitionName, cancellationToken).ConfigureAwait(false);
        }

        /// <summary> Gets policy definition. </summary>
        /// <param name="policyDefinitionName"> The policy definition name. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        public virtual Response<PolicyDefinition> Get(string policyDefinitionName, CancellationToken cancellationToken = default)
        {
            return RestClient.Get(policyDefinitionName, cancellationToken);
        }

        /// <summary> Deletes policy definition. </summary>
        /// <param name="policyDefinitionName"> The policy definition name. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        public virtual async Task<Response> DeleteAsync(string policyDefinitionName, CancellationToken cancellationToken = default)
        {
            return await RestClient.DeleteAsync(policyDefinitionName, cancellationToken).ConfigureAwait(false);
        }

        /// <summary> Deletes policy definition. </summary>
        /// <param name="policyDefinitionName"> The policy definition name. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        public virtual Response Delete(string policyDefinitionName, CancellationToken cancellationToken = default)
        {
            return RestClient.Delete(policyDefinitionName, cancellationToken);
        }
    }
}

// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.Collections.Generic;
using System.Text.Json;
using System.Threading;
using System.Threading.Tasks;
using Azure;
using Azure.Core;
using Azure.Core.Pipeline;
using Azure.Management.Resource.Models;

namespace Azure.Management.Resource
{
    /// <summary> The Resources service client. </summary>
    public partial class ResourcesClient
    {
        private readonly ClientDiagnostics _clientDiagnostics;
        private readonly HttpPipeline _pipeline;
        internal ResourcesRestClient RestClient { get; }
        /// <summary> Initializes a new instance of ResourcesClient for mocking. </summary>
        protected ResourcesClient()
        {
        }

        /// <summary> Initializes a new instance of ResourcesClient. </summary>
        public ResourcesClient(string subscriptionId, TokenCredential tokenCredential, ResourceManagementClientOptions options = null)
        {
            options ??= new ResourceManagementClientOptions();
            _clientDiagnostics = new ClientDiagnostics(options);
            _pipeline = ManagementPipelineBuilder.Build(tokenCredential, options);
            RestClient = new ResourcesRestClient(_clientDiagnostics, _pipeline, subscriptionId: subscriptionId, apiVersion: options.Version);
        }

        /// <summary> Checks whether resource exists. </summary>
        /// <param name="resourceGroupName"> The name of the resource group. The name is case insensitive. </param>
        /// <param name="resourceProviderNamespace"> Resource identity. </param>
        /// <param name="parentResourcePath"> Resource identity. </param>
        /// <param name="resourceType"> Resource identity. </param>
        /// <param name="resourceName"> Resource identity. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        public virtual async Task<Response> CheckExistenceAsync(string resourceGroupName, string resourceProviderNamespace, string parentResourcePath, string resourceType, string resourceName, CancellationToken cancellationToken = default)
        {
            return await RestClient.CheckExistenceAsync(resourceGroupName, resourceProviderNamespace, parentResourcePath, resourceType, resourceName, cancellationToken).ConfigureAwait(false);
        }

        /// <summary> Checks whether resource exists. </summary>
        /// <param name="resourceGroupName"> The name of the resource group. The name is case insensitive. </param>
        /// <param name="resourceProviderNamespace"> Resource identity. </param>
        /// <param name="parentResourcePath"> Resource identity. </param>
        /// <param name="resourceType"> Resource identity. </param>
        /// <param name="resourceName"> Resource identity. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        public virtual Response CheckExistence(string resourceGroupName, string resourceProviderNamespace, string parentResourcePath, string resourceType, string resourceName, CancellationToken cancellationToken = default)
        {
            return RestClient.CheckExistence(resourceGroupName, resourceProviderNamespace, parentResourcePath, resourceType, resourceName, cancellationToken);
        }

        /// <summary> Delete resource and all of its resources. </summary>
        /// <param name="resourceGroupName"> The name of the resource group. The name is case insensitive. </param>
        /// <param name="resourceProviderNamespace"> Resource identity. </param>
        /// <param name="parentResourcePath"> Resource identity. </param>
        /// <param name="resourceType"> Resource identity. </param>
        /// <param name="resourceName"> Resource identity. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        public virtual async Task<Response> DeleteAsync(string resourceGroupName, string resourceProviderNamespace, string parentResourcePath, string resourceType, string resourceName, CancellationToken cancellationToken = default)
        {
            return await RestClient.DeleteAsync(resourceGroupName, resourceProviderNamespace, parentResourcePath, resourceType, resourceName, cancellationToken).ConfigureAwait(false);
        }

        /// <summary> Delete resource and all of its resources. </summary>
        /// <param name="resourceGroupName"> The name of the resource group. The name is case insensitive. </param>
        /// <param name="resourceProviderNamespace"> Resource identity. </param>
        /// <param name="parentResourcePath"> Resource identity. </param>
        /// <param name="resourceType"> Resource identity. </param>
        /// <param name="resourceName"> Resource identity. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        public virtual Response Delete(string resourceGroupName, string resourceProviderNamespace, string parentResourcePath, string resourceType, string resourceName, CancellationToken cancellationToken = default)
        {
            return RestClient.Delete(resourceGroupName, resourceProviderNamespace, parentResourcePath, resourceType, resourceName, cancellationToken);
        }

        /// <summary> Create a resource. </summary>
        /// <param name="resourceGroupName"> The name of the resource group. The name is case insensitive. </param>
        /// <param name="resourceProviderNamespace"> Resource identity. </param>
        /// <param name="parentResourcePath"> Resource identity. </param>
        /// <param name="resourceType"> Resource identity. </param>
        /// <param name="resourceName"> Resource identity. </param>
        /// <param name="parameters"> Create or update resource parameters. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        public virtual async Task<Response<GenericResource>> CreateOrUpdateAsync(string resourceGroupName, string resourceProviderNamespace, string parentResourcePath, string resourceType, string resourceName, GenericResource parameters, CancellationToken cancellationToken = default)
        {
            return await RestClient.CreateOrUpdateAsync(resourceGroupName, resourceProviderNamespace, parentResourcePath, resourceType, resourceName, parameters, cancellationToken).ConfigureAwait(false);
        }

        /// <summary> Create a resource. </summary>
        /// <param name="resourceGroupName"> The name of the resource group. The name is case insensitive. </param>
        /// <param name="resourceProviderNamespace"> Resource identity. </param>
        /// <param name="parentResourcePath"> Resource identity. </param>
        /// <param name="resourceType"> Resource identity. </param>
        /// <param name="resourceName"> Resource identity. </param>
        /// <param name="parameters"> Create or update resource parameters. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        public virtual Response<GenericResource> CreateOrUpdate(string resourceGroupName, string resourceProviderNamespace, string parentResourcePath, string resourceType, string resourceName, GenericResource parameters, CancellationToken cancellationToken = default)
        {
            return RestClient.CreateOrUpdate(resourceGroupName, resourceProviderNamespace, parentResourcePath, resourceType, resourceName, parameters, cancellationToken);
        }

        /// <summary> Returns a resource belonging to a resource group. </summary>
        /// <param name="resourceGroupName"> The name of the resource group. The name is case insensitive. </param>
        /// <param name="resourceProviderNamespace"> Resource identity. </param>
        /// <param name="parentResourcePath"> Resource identity. </param>
        /// <param name="resourceType"> Resource identity. </param>
        /// <param name="resourceName"> Resource identity. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        public virtual async Task<Response<GenericResource>> GetAsync(string resourceGroupName, string resourceProviderNamespace, string parentResourcePath, string resourceType, string resourceName, CancellationToken cancellationToken = default)
        {
            return await RestClient.GetAsync(resourceGroupName, resourceProviderNamespace, parentResourcePath, resourceType, resourceName, cancellationToken).ConfigureAwait(false);
        }

        /// <summary> Returns a resource belonging to a resource group. </summary>
        /// <param name="resourceGroupName"> The name of the resource group. The name is case insensitive. </param>
        /// <param name="resourceProviderNamespace"> Resource identity. </param>
        /// <param name="parentResourcePath"> Resource identity. </param>
        /// <param name="resourceType"> Resource identity. </param>
        /// <param name="resourceName"> Resource identity. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        public virtual Response<GenericResource> Get(string resourceGroupName, string resourceProviderNamespace, string parentResourcePath, string resourceType, string resourceName, CancellationToken cancellationToken = default)
        {
            return RestClient.Get(resourceGroupName, resourceProviderNamespace, parentResourcePath, resourceType, resourceName, cancellationToken);
        }

        /// <summary> Get all of the resources under a subscription. </summary>
        /// <param name="filter"> The filter to apply on the operation. </param>
        /// <param name="expand"> Comma-separated list of additional properties to be included in the response. Valid values include `createdTime`, `changedTime` and `provisioningState`. For example, `$expand=createdTime,changedTime`. </param>
        /// <param name="top"> Query parameters. If null is passed returns all resource groups. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        public virtual AsyncPageable<GenericResourceExpanded> ListAsync(string filter = null, string expand = null, int? top = null, CancellationToken cancellationToken = default)
        {
            async Task<Page<GenericResourceExpanded>> FirstPageFunc(int? pageSizeHint)
            {
                var response = await RestClient.ListAsync(filter, expand, top, cancellationToken).ConfigureAwait(false);
                return Page.FromValues(response.Value.Value, response.Value.NextLink, response.GetRawResponse());
            }
            async Task<Page<GenericResourceExpanded>> NextPageFunc(string nextLink, int? pageSizeHint)
            {
                var response = await RestClient.ListNextPageAsync(nextLink, filter, expand, top, cancellationToken).ConfigureAwait(false);
                return Page.FromValues(response.Value.Value, response.Value.NextLink, response.GetRawResponse());
            }
            return PageableHelpers.CreateAsyncEnumerable(FirstPageFunc, NextPageFunc);
        }

        /// <summary> Get all of the resources under a subscription. </summary>
        /// <param name="filter"> The filter to apply on the operation. </param>
        /// <param name="expand"> Comma-separated list of additional properties to be included in the response. Valid values include `createdTime`, `changedTime` and `provisioningState`. For example, `$expand=createdTime,changedTime`. </param>
        /// <param name="top"> Query parameters. If null is passed returns all resource groups. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        public virtual Pageable<GenericResourceExpanded> List(string filter = null, string expand = null, int? top = null, CancellationToken cancellationToken = default)
        {
            Page<GenericResourceExpanded> FirstPageFunc(int? pageSizeHint)
            {
                var response = RestClient.List(filter, expand, top, cancellationToken);
                return Page.FromValues(response.Value.Value, response.Value.NextLink, response.GetRawResponse());
            }
            Page<GenericResourceExpanded> NextPageFunc(string nextLink, int? pageSizeHint)
            {
                var response = RestClient.ListNextPage(nextLink, filter, expand, top, cancellationToken);
                return Page.FromValues(response.Value.Value, response.Value.NextLink, response.GetRawResponse());
            }
            return PageableHelpers.CreateEnumerable(FirstPageFunc, NextPageFunc);
        }

        /// <summary> Begin moving resources.To determine whether the operation has finished processing the request, call GetLongRunningOperationStatus. </summary>
        /// <param name="originalResponse"> The original response from starting the operation. </param>
        /// <param name="createOriginalHttpMessage"> Creates the HTTP message used for the original request. </param>
        internal Operation<Response> CreateMoveResources(Response originalResponse, Func<HttpMessage> createOriginalHttpMessage)
        {
            if (originalResponse == null)
            {
                throw new ArgumentNullException(nameof(originalResponse));
            }
            if (createOriginalHttpMessage == null)
            {
                throw new ArgumentNullException(nameof(createOriginalHttpMessage));
            }

            return ArmOperationHelpers.Create(_pipeline, _clientDiagnostics, originalResponse, RequestMethod.Post, "ResourcesClient.MoveResources", OperationFinalStateVia.Location, createOriginalHttpMessage);
        }

        /// <summary> Begin moving resources.To determine whether the operation has finished processing the request, call GetLongRunningOperationStatus. </summary>
        /// <param name="sourceResourceGroupName"> Source resource group name. </param>
        /// <param name="resources"> Gets or sets the ids of the resources. </param>
        /// <param name="targetResourceGroup"> The target resource group. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        public virtual async ValueTask<Operation<Response>> StartMoveResourcesAsync(string sourceResourceGroupName, IEnumerable<string> resources = null, string targetResourceGroup = null, CancellationToken cancellationToken = default)
        {
            if (sourceResourceGroupName == null)
            {
                throw new ArgumentNullException(nameof(sourceResourceGroupName));
            }

            var originalResponse = await RestClient.MoveResourcesAsync(sourceResourceGroupName, resources, targetResourceGroup, cancellationToken).ConfigureAwait(false);
            return CreateMoveResources(originalResponse, () => RestClient.CreateMoveResourcesRequest(sourceResourceGroupName, resources, targetResourceGroup));
        }

        /// <summary> Begin moving resources.To determine whether the operation has finished processing the request, call GetLongRunningOperationStatus. </summary>
        /// <param name="sourceResourceGroupName"> Source resource group name. </param>
        /// <param name="resources"> Gets or sets the ids of the resources. </param>
        /// <param name="targetResourceGroup"> The target resource group. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        public virtual Operation<Response> StartMoveResources(string sourceResourceGroupName, IEnumerable<string> resources = null, string targetResourceGroup = null, CancellationToken cancellationToken = default)
        {
            if (sourceResourceGroupName == null)
            {
                throw new ArgumentNullException(nameof(sourceResourceGroupName));
            }

            var originalResponse = RestClient.MoveResources(sourceResourceGroupName, resources, targetResourceGroup, cancellationToken);
            return CreateMoveResources(originalResponse, () => RestClient.CreateMoveResourcesRequest(sourceResourceGroupName, resources, targetResourceGroup));
        }

        /// <summary> Updates a resource. </summary>
        /// <param name="originalResponse"> The original response from starting the operation. </param>
        /// <param name="createOriginalHttpMessage"> Creates the HTTP message used for the original request. </param>
        internal Operation<GenericResource> CreateUpdate(Response originalResponse, Func<HttpMessage> createOriginalHttpMessage)
        {
            if (originalResponse == null)
            {
                throw new ArgumentNullException(nameof(originalResponse));
            }
            if (createOriginalHttpMessage == null)
            {
                throw new ArgumentNullException(nameof(createOriginalHttpMessage));
            }

            return ArmOperationHelpers.Create(_pipeline, _clientDiagnostics, originalResponse, RequestMethod.Patch, "ResourcesClient.Update", OperationFinalStateVia.Location, createOriginalHttpMessage,
            (response, cancellationToken) =>
            {
                using var document = JsonDocument.Parse(response.ContentStream);
                if (document.RootElement.ValueKind == JsonValueKind.Null)
                {
                    return null;
                }
                else
                {
                    return GenericResource.DeserializeGenericResource(document.RootElement);
                }
            },
            async (response, cancellationToken) =>
            {
                using var document = await JsonDocument.ParseAsync(response.ContentStream, default, cancellationToken).ConfigureAwait(false);
                if (document.RootElement.ValueKind == JsonValueKind.Null)
                {
                    return null;
                }
                else
                {
                    return GenericResource.DeserializeGenericResource(document.RootElement);
                }
            });
        }

        /// <summary> Updates a resource. </summary>
        /// <param name="resourceGroupName"> The name of the resource group for the resource. The name is case insensitive. </param>
        /// <param name="resourceProviderNamespace"> The namespace of the resource provider. </param>
        /// <param name="parentResourcePath"> The parent resource identity. </param>
        /// <param name="resourceType"> The resource type of the resource to update. </param>
        /// <param name="resourceName"> The name of the resource to update. </param>
        /// <param name="parameters"> Parameters for updating the resource. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        public virtual async ValueTask<Operation<GenericResource>> StartUpdateAsync(string resourceGroupName, string resourceProviderNamespace, string parentResourcePath, string resourceType, string resourceName, GenericResource parameters, CancellationToken cancellationToken = default)
        {
            if (resourceGroupName == null)
            {
                throw new ArgumentNullException(nameof(resourceGroupName));
            }
            if (resourceProviderNamespace == null)
            {
                throw new ArgumentNullException(nameof(resourceProviderNamespace));
            }
            if (parentResourcePath == null)
            {
                throw new ArgumentNullException(nameof(parentResourcePath));
            }
            if (resourceType == null)
            {
                throw new ArgumentNullException(nameof(resourceType));
            }
            if (resourceName == null)
            {
                throw new ArgumentNullException(nameof(resourceName));
            }
            if (parameters == null)
            {
                throw new ArgumentNullException(nameof(parameters));
            }

            var originalResponse = await RestClient.UpdateAsync(resourceGroupName, resourceProviderNamespace, parentResourcePath, resourceType, resourceName, parameters, cancellationToken).ConfigureAwait(false);
            return CreateUpdate(originalResponse, () => RestClient.CreateUpdateRequest(resourceGroupName, resourceProviderNamespace, parentResourcePath, resourceType, resourceName, parameters));
        }

        /// <summary> Updates a resource. </summary>
        /// <param name="resourceGroupName"> The name of the resource group for the resource. The name is case insensitive. </param>
        /// <param name="resourceProviderNamespace"> The namespace of the resource provider. </param>
        /// <param name="parentResourcePath"> The parent resource identity. </param>
        /// <param name="resourceType"> The resource type of the resource to update. </param>
        /// <param name="resourceName"> The name of the resource to update. </param>
        /// <param name="parameters"> Parameters for updating the resource. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        public virtual Operation<GenericResource> StartUpdate(string resourceGroupName, string resourceProviderNamespace, string parentResourcePath, string resourceType, string resourceName, GenericResource parameters, CancellationToken cancellationToken = default)
        {
            if (resourceGroupName == null)
            {
                throw new ArgumentNullException(nameof(resourceGroupName));
            }
            if (resourceProviderNamespace == null)
            {
                throw new ArgumentNullException(nameof(resourceProviderNamespace));
            }
            if (parentResourcePath == null)
            {
                throw new ArgumentNullException(nameof(parentResourcePath));
            }
            if (resourceType == null)
            {
                throw new ArgumentNullException(nameof(resourceType));
            }
            if (resourceName == null)
            {
                throw new ArgumentNullException(nameof(resourceName));
            }
            if (parameters == null)
            {
                throw new ArgumentNullException(nameof(parameters));
            }

            var originalResponse = RestClient.Update(resourceGroupName, resourceProviderNamespace, parentResourcePath, resourceType, resourceName, parameters, cancellationToken);
            return CreateUpdate(originalResponse, () => RestClient.CreateUpdateRequest(resourceGroupName, resourceProviderNamespace, parentResourcePath, resourceType, resourceName, parameters));
        }
    }
}

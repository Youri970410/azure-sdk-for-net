// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.Text.Json;
using Azure.Core;

namespace Azure.Management.Network.Models
{
    public partial class ConnectionMonitorResultProperties : IUtf8JsonSerializable
    {
        void IUtf8JsonSerializable.Write(Utf8JsonWriter writer)
        {
            writer.WriteStartObject();
            if (ProvisioningState != null)
            {
                writer.WritePropertyName("provisioningState");
                writer.WriteStringValue(ProvisioningState.Value.ToString());
            }
            if (StartTime != null)
            {
                writer.WritePropertyName("startTime");
                writer.WriteStringValue(StartTime.Value, "O");
            }
            if (MonitoringStatus != null)
            {
                writer.WritePropertyName("monitoringStatus");
                writer.WriteStringValue(MonitoringStatus);
            }
            writer.WritePropertyName("source");
            writer.WriteObjectValue(Source);
            writer.WritePropertyName("destination");
            writer.WriteObjectValue(Destination);
            if (AutoStart != null)
            {
                writer.WritePropertyName("autoStart");
                writer.WriteBooleanValue(AutoStart.Value);
            }
            if (MonitoringIntervalInSeconds != null)
            {
                writer.WritePropertyName("monitoringIntervalInSeconds");
                writer.WriteNumberValue(MonitoringIntervalInSeconds.Value);
            }
            writer.WriteEndObject();
        }

        internal static ConnectionMonitorResultProperties DeserializeConnectionMonitorResultProperties(JsonElement element)
        {
            ProvisioningState? provisioningState = default;
            DateTimeOffset? startTime = default;
            string monitoringStatus = default;
            ConnectionMonitorSource source = default;
            ConnectionMonitorDestination destination = default;
            bool? autoStart = default;
            int? monitoringIntervalInSeconds = default;
            foreach (var property in element.EnumerateObject())
            {
                if (property.NameEquals("provisioningState"))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        continue;
                    }
                    provisioningState = new ProvisioningState(property.Value.GetString());
                    continue;
                }
                if (property.NameEquals("startTime"))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        continue;
                    }
                    startTime = property.Value.GetDateTimeOffset("O");
                    continue;
                }
                if (property.NameEquals("monitoringStatus"))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        continue;
                    }
                    monitoringStatus = property.Value.GetString();
                    continue;
                }
                if (property.NameEquals("source"))
                {
                    source = ConnectionMonitorSource.DeserializeConnectionMonitorSource(property.Value);
                    continue;
                }
                if (property.NameEquals("destination"))
                {
                    destination = ConnectionMonitorDestination.DeserializeConnectionMonitorDestination(property.Value);
                    continue;
                }
                if (property.NameEquals("autoStart"))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        continue;
                    }
                    autoStart = property.Value.GetBoolean();
                    continue;
                }
                if (property.NameEquals("monitoringIntervalInSeconds"))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        continue;
                    }
                    monitoringIntervalInSeconds = property.Value.GetInt32();
                    continue;
                }
            }
            return new ConnectionMonitorResultProperties(source, destination, autoStart, monitoringIntervalInSeconds, provisioningState, startTime, monitoringStatus);
        }
    }
}

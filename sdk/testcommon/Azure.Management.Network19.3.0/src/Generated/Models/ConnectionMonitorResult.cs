// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.Collections.Generic;

namespace Azure.Management.Network.Models
{
    /// <summary> Information about the connection monitor. </summary>
    public partial class ConnectionMonitorResult
    {
        /// <summary> Initializes a new instance of ConnectionMonitorResult. </summary>
        internal ConnectionMonitorResult()
        {
        }

        /// <summary> Initializes a new instance of ConnectionMonitorResult. </summary>
        /// <param name="name"> Name of the connection monitor. </param>
        /// <param name="id"> ID of the connection monitor. </param>
        /// <param name="etag"> . </param>
        /// <param name="type"> Connection monitor type. </param>
        /// <param name="location"> Connection monitor location. </param>
        /// <param name="tags"> Connection monitor tags. </param>
        /// <param name="source"> Describes the source of connection monitor. </param>
        /// <param name="destination"> Describes the destination of connection monitor. </param>
        /// <param name="autoStart"> Determines if the connection monitor will start automatically once created. </param>
        /// <param name="monitoringIntervalInSeconds"> Monitoring interval in seconds. </param>
        /// <param name="provisioningState"> The provisioning state of the connection monitor. </param>
        /// <param name="startTime"> The date and time when the connection monitor was started. </param>
        /// <param name="monitoringStatus"> The monitoring status of the connection monitor. </param>
        internal ConnectionMonitorResult(string name, string id, string etag, string type, string location, IReadOnlyDictionary<string, string> tags, ConnectionMonitorSource source, ConnectionMonitorDestination destination, bool? autoStart, int? monitoringIntervalInSeconds, ProvisioningState? provisioningState, DateTimeOffset? startTime, string monitoringStatus)
        {
            Name = name;
            Id = id;
            Etag = etag;
            Type = type;
            Location = location;
            Tags = tags;
            Source = source;
            Destination = destination;
            AutoStart = autoStart;
            MonitoringIntervalInSeconds = monitoringIntervalInSeconds;
            ProvisioningState = provisioningState;
            StartTime = startTime;
            MonitoringStatus = monitoringStatus;
        }

        /// <summary> Name of the connection monitor. </summary>
        public string Name { get; }
        /// <summary> ID of the connection monitor. </summary>
        public string Id { get; }
        public string Etag { get; }
        /// <summary> Connection monitor type. </summary>
        public string Type { get; }
        /// <summary> Connection monitor location. </summary>
        public string Location { get; }
        /// <summary> Connection monitor tags. </summary>
        public IReadOnlyDictionary<string, string> Tags { get; }
        /// <summary> Describes the source of connection monitor. </summary>
        public ConnectionMonitorSource Source { get; }
        /// <summary> Describes the destination of connection monitor. </summary>
        public ConnectionMonitorDestination Destination { get; }
        /// <summary> Determines if the connection monitor will start automatically once created. </summary>
        public bool? AutoStart { get; }
        /// <summary> Monitoring interval in seconds. </summary>
        public int? MonitoringIntervalInSeconds { get; }
        /// <summary> The provisioning state of the connection monitor. </summary>
        public ProvisioningState? ProvisioningState { get; }
        /// <summary> The date and time when the connection monitor was started. </summary>
        public DateTimeOffset? StartTime { get; }
        /// <summary> The monitoring status of the connection monitor. </summary>
        public string MonitoringStatus { get; }
    }
}

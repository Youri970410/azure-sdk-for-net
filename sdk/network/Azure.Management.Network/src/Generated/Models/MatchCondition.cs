// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System.Collections.Generic;

namespace Azure.Management.Network.Models
{
    /// <summary> Define match conditions. </summary>
    public partial class MatchCondition
    {
        /// <summary> Initializes a new instance of MatchCondition. </summary>
        /// <param name="matchVariables"> List of match variables. </param>
        /// <param name="operator"> The operator to be matched. </param>
        /// <param name="matchValues"> Match value. </param>
        public MatchCondition(IList<MatchVariable> matchVariables, WebApplicationFirewallOperator @operator, IList<string> matchValues)
        {
            MatchVariables = matchVariables;
            Operator = @operator;
            MatchValues = matchValues;
        }

        /// <summary> Initializes a new instance of MatchCondition. </summary>
        /// <param name="matchVariables"> List of match variables. </param>
        /// <param name="operator"> The operator to be matched. </param>
        /// <param name="negationConditon"> Whether this is negate condition or not. </param>
        /// <param name="matchValues"> Match value. </param>
        /// <param name="transforms"> List of transforms. </param>
        internal MatchCondition(IList<MatchVariable> matchVariables, WebApplicationFirewallOperator @operator, bool? negationConditon, IList<string> matchValues, IList<WebApplicationFirewallTransform> transforms)
        {
            MatchVariables = matchVariables;
            Operator = @operator;
            NegationConditon = negationConditon;
            MatchValues = matchValues;
            Transforms = transforms;
        }

        /// <summary> List of match variables. </summary>
        public IList<MatchVariable> MatchVariables { get; } = new List<MatchVariable>();
        /// <summary> The operator to be matched. </summary>
        public WebApplicationFirewallOperator Operator { get; }
        /// <summary> Whether this is negate condition or not. </summary>
        public bool? NegationConditon { get; set; }
        /// <summary> Match value. </summary>
        public IList<string> MatchValues { get; } = new List<string>();
        /// <summary> List of transforms. </summary>
        public IList<WebApplicationFirewallTransform> Transforms { get; set; }
    }
}

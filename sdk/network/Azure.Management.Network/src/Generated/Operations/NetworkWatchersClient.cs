// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.Collections.Generic;
using System.Text.Json;
using System.Threading;
using System.Threading.Tasks;
using Azure;
using Azure.Core;
using Azure.Core.Pipeline;
using Azure.Management.Network.Models;

namespace Azure.Management.Network
{
    /// <summary> The NetworkWatchers service client. </summary>
    public partial class NetworkWatchersClient
    {
        private readonly ClientDiagnostics _clientDiagnostics;
        private readonly HttpPipeline _pipeline;
        internal NetworkWatchersRestClient RestClient { get; }
        /// <summary> Initializes a new instance of NetworkWatchersClient for mocking. </summary>
        protected NetworkWatchersClient()
        {
        }

        /// <summary> Initializes a new instance of NetworkWatchersClient. </summary>
        public NetworkWatchersClient(string subscriptionId, TokenCredential tokenCredential, NetworkManagementClientOptions options = null)
        {
            options ??= new NetworkManagementClientOptions();
            _clientDiagnostics = new ClientDiagnostics(options);
            _pipeline = ManagementPipelineBuilder.Build(tokenCredential, options);
            RestClient = new NetworkWatchersRestClient(_clientDiagnostics, _pipeline, subscriptionId: subscriptionId);
        }

        /// <summary> Creates or updates a network watcher in the specified resource group. </summary>
        /// <param name="resourceGroupName"> The name of the resource group. </param>
        /// <param name="networkWatcherName"> The name of the network watcher. </param>
        /// <param name="parameters"> Parameters that define the network watcher resource. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        public virtual async Task<Response<NetworkWatcher>> CreateOrUpdateAsync(string resourceGroupName, string networkWatcherName, NetworkWatcher parameters, CancellationToken cancellationToken = default)
        {
            return await RestClient.CreateOrUpdateAsync(resourceGroupName, networkWatcherName, parameters, cancellationToken).ConfigureAwait(false);
        }

        /// <summary> Creates or updates a network watcher in the specified resource group. </summary>
        /// <param name="resourceGroupName"> The name of the resource group. </param>
        /// <param name="networkWatcherName"> The name of the network watcher. </param>
        /// <param name="parameters"> Parameters that define the network watcher resource. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        public virtual Response<NetworkWatcher> CreateOrUpdate(string resourceGroupName, string networkWatcherName, NetworkWatcher parameters, CancellationToken cancellationToken = default)
        {
            return RestClient.CreateOrUpdate(resourceGroupName, networkWatcherName, parameters, cancellationToken);
        }

        /// <summary> Gets the specified network watcher by resource group. </summary>
        /// <param name="resourceGroupName"> The name of the resource group. </param>
        /// <param name="networkWatcherName"> The name of the network watcher. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        public virtual async Task<Response<NetworkWatcher>> GetAsync(string resourceGroupName, string networkWatcherName, CancellationToken cancellationToken = default)
        {
            return await RestClient.GetAsync(resourceGroupName, networkWatcherName, cancellationToken).ConfigureAwait(false);
        }

        /// <summary> Gets the specified network watcher by resource group. </summary>
        /// <param name="resourceGroupName"> The name of the resource group. </param>
        /// <param name="networkWatcherName"> The name of the network watcher. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        public virtual Response<NetworkWatcher> Get(string resourceGroupName, string networkWatcherName, CancellationToken cancellationToken = default)
        {
            return RestClient.Get(resourceGroupName, networkWatcherName, cancellationToken);
        }

        /// <summary> Updates a network watcher tags. </summary>
        /// <param name="resourceGroupName"> The name of the resource group. </param>
        /// <param name="networkWatcherName"> The name of the network watcher. </param>
        /// <param name="tags"> Resource tags. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        public virtual async Task<Response<NetworkWatcher>> UpdateTagsAsync(string resourceGroupName, string networkWatcherName, IDictionary<string, string> tags = null, CancellationToken cancellationToken = default)
        {
            return await RestClient.UpdateTagsAsync(resourceGroupName, networkWatcherName, tags, cancellationToken).ConfigureAwait(false);
        }

        /// <summary> Updates a network watcher tags. </summary>
        /// <param name="resourceGroupName"> The name of the resource group. </param>
        /// <param name="networkWatcherName"> The name of the network watcher. </param>
        /// <param name="tags"> Resource tags. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        public virtual Response<NetworkWatcher> UpdateTags(string resourceGroupName, string networkWatcherName, IDictionary<string, string> tags = null, CancellationToken cancellationToken = default)
        {
            return RestClient.UpdateTags(resourceGroupName, networkWatcherName, tags, cancellationToken);
        }

        /// <summary> Gets the current network topology by resource group. </summary>
        /// <param name="resourceGroupName"> The name of the resource group. </param>
        /// <param name="networkWatcherName"> The name of the network watcher. </param>
        /// <param name="parameters"> Parameters that define the representation of topology. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        public virtual async Task<Response<Topology>> GetTopologyAsync(string resourceGroupName, string networkWatcherName, TopologyParameters parameters, CancellationToken cancellationToken = default)
        {
            return await RestClient.GetTopologyAsync(resourceGroupName, networkWatcherName, parameters, cancellationToken).ConfigureAwait(false);
        }

        /// <summary> Gets the current network topology by resource group. </summary>
        /// <param name="resourceGroupName"> The name of the resource group. </param>
        /// <param name="networkWatcherName"> The name of the network watcher. </param>
        /// <param name="parameters"> Parameters that define the representation of topology. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        public virtual Response<Topology> GetTopology(string resourceGroupName, string networkWatcherName, TopologyParameters parameters, CancellationToken cancellationToken = default)
        {
            return RestClient.GetTopology(resourceGroupName, networkWatcherName, parameters, cancellationToken);
        }

        /// <summary> Gets all network watchers by resource group. </summary>
        /// <param name="resourceGroupName"> The name of the resource group. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        public virtual AsyncPageable<NetworkWatcher> ListAsync(string resourceGroupName, CancellationToken cancellationToken = default)
        {
            if (resourceGroupName == null)
            {
                throw new ArgumentNullException(nameof(resourceGroupName));
            }

            async Task<Page<NetworkWatcher>> FirstPageFunc(int? pageSizeHint)
            {
                var response = await RestClient.ListAsync(resourceGroupName, cancellationToken).ConfigureAwait(false);
                return Page.FromValues(response.Value.Value, null, response.GetRawResponse());
            }
            async Task<Page<NetworkWatcher>> NextPageFunc(string nextLink, int? pageSizeHint)
            {
                var response = await RestClient.ListNextPageAsync(nextLink, resourceGroupName, cancellationToken).ConfigureAwait(false);
                return Page.FromValues(response.Value.Value, null, response.GetRawResponse());
            }
            return PageableHelpers.CreateAsyncEnumerable(FirstPageFunc, NextPageFunc);
        }

        /// <summary> Gets all network watchers by resource group. </summary>
        /// <param name="resourceGroupName"> The name of the resource group. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        public virtual Pageable<NetworkWatcher> List(string resourceGroupName, CancellationToken cancellationToken = default)
        {
            if (resourceGroupName == null)
            {
                throw new ArgumentNullException(nameof(resourceGroupName));
            }

            Page<NetworkWatcher> FirstPageFunc(int? pageSizeHint)
            {
                var response = RestClient.List(resourceGroupName, cancellationToken);
                return Page.FromValues(response.Value.Value, null, response.GetRawResponse());
            }
            Page<NetworkWatcher> NextPageFunc(string nextLink, int? pageSizeHint)
            {
                var response = RestClient.ListNextPage(nextLink, resourceGroupName, cancellationToken);
                return Page.FromValues(response.Value.Value, null, response.GetRawResponse());
            }
            return PageableHelpers.CreateEnumerable(FirstPageFunc, NextPageFunc);
        }

        /// <summary> Gets all network watchers by subscription. </summary>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        public virtual AsyncPageable<NetworkWatcher> ListAllAsync(CancellationToken cancellationToken = default)
        {
            async Task<Page<NetworkWatcher>> FirstPageFunc(int? pageSizeHint)
            {
                var response = await RestClient.ListAllAsync(cancellationToken).ConfigureAwait(false);
                return Page.FromValues(response.Value.Value, null, response.GetRawResponse());
            }
            async Task<Page<NetworkWatcher>> NextPageFunc(string nextLink, int? pageSizeHint)
            {
                var response = await RestClient.ListAllNextPageAsync(nextLink, cancellationToken).ConfigureAwait(false);
                return Page.FromValues(response.Value.Value, null, response.GetRawResponse());
            }
            return PageableHelpers.CreateAsyncEnumerable(FirstPageFunc, NextPageFunc);
        }

        /// <summary> Gets all network watchers by subscription. </summary>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        public virtual Pageable<NetworkWatcher> ListAll(CancellationToken cancellationToken = default)
        {
            Page<NetworkWatcher> FirstPageFunc(int? pageSizeHint)
            {
                var response = RestClient.ListAll(cancellationToken);
                return Page.FromValues(response.Value.Value, null, response.GetRawResponse());
            }
            Page<NetworkWatcher> NextPageFunc(string nextLink, int? pageSizeHint)
            {
                var response = RestClient.ListAllNextPage(nextLink, cancellationToken);
                return Page.FromValues(response.Value.Value, null, response.GetRawResponse());
            }
            return PageableHelpers.CreateEnumerable(FirstPageFunc, NextPageFunc);
        }

        /// <summary> Deletes the specified network watcher resource. </summary>
        /// <param name="originalResponse"> The original response from starting the operation. </param>
        /// <param name="createOriginalHttpMessage"> Creates the HTTP message used for the original request. </param>
        internal Operation<Response> CreateDelete(Response originalResponse, Func<HttpMessage> createOriginalHttpMessage)
        {
            if (originalResponse == null)
            {
                throw new ArgumentNullException(nameof(originalResponse));
            }
            if (createOriginalHttpMessage == null)
            {
                throw new ArgumentNullException(nameof(createOriginalHttpMessage));
            }

            return ArmOperationHelpers.Create(_pipeline, _clientDiagnostics, originalResponse, RequestMethod.Delete, "NetworkWatchersClient.Delete", OperationFinalStateVia.Location, createOriginalHttpMessage);
        }

        /// <summary> Deletes the specified network watcher resource. </summary>
        /// <param name="resourceGroupName"> The name of the resource group. </param>
        /// <param name="networkWatcherName"> The name of the network watcher. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        public virtual async ValueTask<Operation<Response>> StartDeleteAsync(string resourceGroupName, string networkWatcherName, CancellationToken cancellationToken = default)
        {
            if (resourceGroupName == null)
            {
                throw new ArgumentNullException(nameof(resourceGroupName));
            }
            if (networkWatcherName == null)
            {
                throw new ArgumentNullException(nameof(networkWatcherName));
            }

            var originalResponse = await RestClient.DeleteAsync(resourceGroupName, networkWatcherName, cancellationToken).ConfigureAwait(false);
            return CreateDelete(originalResponse, () => RestClient.CreateDeleteRequest(resourceGroupName, networkWatcherName));
        }

        /// <summary> Deletes the specified network watcher resource. </summary>
        /// <param name="resourceGroupName"> The name of the resource group. </param>
        /// <param name="networkWatcherName"> The name of the network watcher. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        public virtual Operation<Response> StartDelete(string resourceGroupName, string networkWatcherName, CancellationToken cancellationToken = default)
        {
            if (resourceGroupName == null)
            {
                throw new ArgumentNullException(nameof(resourceGroupName));
            }
            if (networkWatcherName == null)
            {
                throw new ArgumentNullException(nameof(networkWatcherName));
            }

            var originalResponse = RestClient.Delete(resourceGroupName, networkWatcherName, cancellationToken);
            return CreateDelete(originalResponse, () => RestClient.CreateDeleteRequest(resourceGroupName, networkWatcherName));
        }

        /// <summary> Verify IP flow from the specified VM to a location given the currently configured NSG rules. </summary>
        /// <param name="originalResponse"> The original response from starting the operation. </param>
        /// <param name="createOriginalHttpMessage"> Creates the HTTP message used for the original request. </param>
        internal Operation<VerificationIPFlowResult> CreateVerifyIPFlow(Response originalResponse, Func<HttpMessage> createOriginalHttpMessage)
        {
            if (originalResponse == null)
            {
                throw new ArgumentNullException(nameof(originalResponse));
            }
            if (createOriginalHttpMessage == null)
            {
                throw new ArgumentNullException(nameof(createOriginalHttpMessage));
            }

            return ArmOperationHelpers.Create(_pipeline, _clientDiagnostics, originalResponse, RequestMethod.Post, "NetworkWatchersClient.VerifyIPFlow", OperationFinalStateVia.Location, createOriginalHttpMessage,
            (response, cancellationToken) =>
            {
                using var document = JsonDocument.Parse(response.ContentStream);
                if (document.RootElement.ValueKind == JsonValueKind.Null)
                {
                    return null;
                }
                else
                {
                    return VerificationIPFlowResult.DeserializeVerificationIPFlowResult(document.RootElement);
                }
            },
            async (response, cancellationToken) =>
            {
                using var document = await JsonDocument.ParseAsync(response.ContentStream, default, cancellationToken).ConfigureAwait(false);
                if (document.RootElement.ValueKind == JsonValueKind.Null)
                {
                    return null;
                }
                else
                {
                    return VerificationIPFlowResult.DeserializeVerificationIPFlowResult(document.RootElement);
                }
            });
        }

        /// <summary> Verify IP flow from the specified VM to a location given the currently configured NSG rules. </summary>
        /// <param name="resourceGroupName"> The name of the resource group. </param>
        /// <param name="networkWatcherName"> The name of the network watcher. </param>
        /// <param name="parameters"> Parameters that define the IP flow to be verified. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        public virtual async ValueTask<Operation<VerificationIPFlowResult>> StartVerifyIPFlowAsync(string resourceGroupName, string networkWatcherName, VerificationIPFlowParameters parameters, CancellationToken cancellationToken = default)
        {
            if (resourceGroupName == null)
            {
                throw new ArgumentNullException(nameof(resourceGroupName));
            }
            if (networkWatcherName == null)
            {
                throw new ArgumentNullException(nameof(networkWatcherName));
            }
            if (parameters == null)
            {
                throw new ArgumentNullException(nameof(parameters));
            }

            var originalResponse = await RestClient.VerifyIPFlowAsync(resourceGroupName, networkWatcherName, parameters, cancellationToken).ConfigureAwait(false);
            return CreateVerifyIPFlow(originalResponse, () => RestClient.CreateVerifyIPFlowRequest(resourceGroupName, networkWatcherName, parameters));
        }

        /// <summary> Verify IP flow from the specified VM to a location given the currently configured NSG rules. </summary>
        /// <param name="resourceGroupName"> The name of the resource group. </param>
        /// <param name="networkWatcherName"> The name of the network watcher. </param>
        /// <param name="parameters"> Parameters that define the IP flow to be verified. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        public virtual Operation<VerificationIPFlowResult> StartVerifyIPFlow(string resourceGroupName, string networkWatcherName, VerificationIPFlowParameters parameters, CancellationToken cancellationToken = default)
        {
            if (resourceGroupName == null)
            {
                throw new ArgumentNullException(nameof(resourceGroupName));
            }
            if (networkWatcherName == null)
            {
                throw new ArgumentNullException(nameof(networkWatcherName));
            }
            if (parameters == null)
            {
                throw new ArgumentNullException(nameof(parameters));
            }

            var originalResponse = RestClient.VerifyIPFlow(resourceGroupName, networkWatcherName, parameters, cancellationToken);
            return CreateVerifyIPFlow(originalResponse, () => RestClient.CreateVerifyIPFlowRequest(resourceGroupName, networkWatcherName, parameters));
        }

        /// <summary> Gets the next hop from the specified VM. </summary>
        /// <param name="originalResponse"> The original response from starting the operation. </param>
        /// <param name="createOriginalHttpMessage"> Creates the HTTP message used for the original request. </param>
        internal Operation<NextHopResult> CreateGetNextHop(Response originalResponse, Func<HttpMessage> createOriginalHttpMessage)
        {
            if (originalResponse == null)
            {
                throw new ArgumentNullException(nameof(originalResponse));
            }
            if (createOriginalHttpMessage == null)
            {
                throw new ArgumentNullException(nameof(createOriginalHttpMessage));
            }

            return ArmOperationHelpers.Create(_pipeline, _clientDiagnostics, originalResponse, RequestMethod.Post, "NetworkWatchersClient.GetNextHop", OperationFinalStateVia.Location, createOriginalHttpMessage,
            (response, cancellationToken) =>
            {
                using var document = JsonDocument.Parse(response.ContentStream);
                if (document.RootElement.ValueKind == JsonValueKind.Null)
                {
                    return null;
                }
                else
                {
                    return NextHopResult.DeserializeNextHopResult(document.RootElement);
                }
            },
            async (response, cancellationToken) =>
            {
                using var document = await JsonDocument.ParseAsync(response.ContentStream, default, cancellationToken).ConfigureAwait(false);
                if (document.RootElement.ValueKind == JsonValueKind.Null)
                {
                    return null;
                }
                else
                {
                    return NextHopResult.DeserializeNextHopResult(document.RootElement);
                }
            });
        }

        /// <summary> Gets the next hop from the specified VM. </summary>
        /// <param name="resourceGroupName"> The name of the resource group. </param>
        /// <param name="networkWatcherName"> The name of the network watcher. </param>
        /// <param name="parameters"> Parameters that define the source and destination endpoint. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        public virtual async ValueTask<Operation<NextHopResult>> StartGetNextHopAsync(string resourceGroupName, string networkWatcherName, NextHopParameters parameters, CancellationToken cancellationToken = default)
        {
            if (resourceGroupName == null)
            {
                throw new ArgumentNullException(nameof(resourceGroupName));
            }
            if (networkWatcherName == null)
            {
                throw new ArgumentNullException(nameof(networkWatcherName));
            }
            if (parameters == null)
            {
                throw new ArgumentNullException(nameof(parameters));
            }

            var originalResponse = await RestClient.GetNextHopAsync(resourceGroupName, networkWatcherName, parameters, cancellationToken).ConfigureAwait(false);
            return CreateGetNextHop(originalResponse, () => RestClient.CreateGetNextHopRequest(resourceGroupName, networkWatcherName, parameters));
        }

        /// <summary> Gets the next hop from the specified VM. </summary>
        /// <param name="resourceGroupName"> The name of the resource group. </param>
        /// <param name="networkWatcherName"> The name of the network watcher. </param>
        /// <param name="parameters"> Parameters that define the source and destination endpoint. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        public virtual Operation<NextHopResult> StartGetNextHop(string resourceGroupName, string networkWatcherName, NextHopParameters parameters, CancellationToken cancellationToken = default)
        {
            if (resourceGroupName == null)
            {
                throw new ArgumentNullException(nameof(resourceGroupName));
            }
            if (networkWatcherName == null)
            {
                throw new ArgumentNullException(nameof(networkWatcherName));
            }
            if (parameters == null)
            {
                throw new ArgumentNullException(nameof(parameters));
            }

            var originalResponse = RestClient.GetNextHop(resourceGroupName, networkWatcherName, parameters, cancellationToken);
            return CreateGetNextHop(originalResponse, () => RestClient.CreateGetNextHopRequest(resourceGroupName, networkWatcherName, parameters));
        }

        /// <summary> Gets the configured and effective security group rules on the specified VM. </summary>
        /// <param name="originalResponse"> The original response from starting the operation. </param>
        /// <param name="createOriginalHttpMessage"> Creates the HTTP message used for the original request. </param>
        internal Operation<SecurityGroupViewResult> CreateGetVMSecurityRules(Response originalResponse, Func<HttpMessage> createOriginalHttpMessage)
        {
            if (originalResponse == null)
            {
                throw new ArgumentNullException(nameof(originalResponse));
            }
            if (createOriginalHttpMessage == null)
            {
                throw new ArgumentNullException(nameof(createOriginalHttpMessage));
            }

            return ArmOperationHelpers.Create(_pipeline, _clientDiagnostics, originalResponse, RequestMethod.Post, "NetworkWatchersClient.GetVMSecurityRules", OperationFinalStateVia.Location, createOriginalHttpMessage,
            (response, cancellationToken) =>
            {
                using var document = JsonDocument.Parse(response.ContentStream);
                if (document.RootElement.ValueKind == JsonValueKind.Null)
                {
                    return null;
                }
                else
                {
                    return SecurityGroupViewResult.DeserializeSecurityGroupViewResult(document.RootElement);
                }
            },
            async (response, cancellationToken) =>
            {
                using var document = await JsonDocument.ParseAsync(response.ContentStream, default, cancellationToken).ConfigureAwait(false);
                if (document.RootElement.ValueKind == JsonValueKind.Null)
                {
                    return null;
                }
                else
                {
                    return SecurityGroupViewResult.DeserializeSecurityGroupViewResult(document.RootElement);
                }
            });
        }

        /// <summary> Gets the configured and effective security group rules on the specified VM. </summary>
        /// <param name="resourceGroupName"> The name of the resource group. </param>
        /// <param name="networkWatcherName"> The name of the network watcher. </param>
        /// <param name="targetResourceId"> ID of the target VM. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        public virtual async ValueTask<Operation<SecurityGroupViewResult>> StartGetVMSecurityRulesAsync(string resourceGroupName, string networkWatcherName, string targetResourceId, CancellationToken cancellationToken = default)
        {
            if (resourceGroupName == null)
            {
                throw new ArgumentNullException(nameof(resourceGroupName));
            }
            if (networkWatcherName == null)
            {
                throw new ArgumentNullException(nameof(networkWatcherName));
            }
            if (targetResourceId == null)
            {
                throw new ArgumentNullException(nameof(targetResourceId));
            }

            var originalResponse = await RestClient.GetVMSecurityRulesAsync(resourceGroupName, networkWatcherName, targetResourceId, cancellationToken).ConfigureAwait(false);
            return CreateGetVMSecurityRules(originalResponse, () => RestClient.CreateGetVMSecurityRulesRequest(resourceGroupName, networkWatcherName, targetResourceId));
        }

        /// <summary> Gets the configured and effective security group rules on the specified VM. </summary>
        /// <param name="resourceGroupName"> The name of the resource group. </param>
        /// <param name="networkWatcherName"> The name of the network watcher. </param>
        /// <param name="targetResourceId"> ID of the target VM. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        public virtual Operation<SecurityGroupViewResult> StartGetVMSecurityRules(string resourceGroupName, string networkWatcherName, string targetResourceId, CancellationToken cancellationToken = default)
        {
            if (resourceGroupName == null)
            {
                throw new ArgumentNullException(nameof(resourceGroupName));
            }
            if (networkWatcherName == null)
            {
                throw new ArgumentNullException(nameof(networkWatcherName));
            }
            if (targetResourceId == null)
            {
                throw new ArgumentNullException(nameof(targetResourceId));
            }

            var originalResponse = RestClient.GetVMSecurityRules(resourceGroupName, networkWatcherName, targetResourceId, cancellationToken);
            return CreateGetVMSecurityRules(originalResponse, () => RestClient.CreateGetVMSecurityRulesRequest(resourceGroupName, networkWatcherName, targetResourceId));
        }

        /// <summary> Initiate troubleshooting on a specified resource. </summary>
        /// <param name="originalResponse"> The original response from starting the operation. </param>
        /// <param name="createOriginalHttpMessage"> Creates the HTTP message used for the original request. </param>
        internal Operation<TroubleshootingResult> CreateGetTroubleshooting(Response originalResponse, Func<HttpMessage> createOriginalHttpMessage)
        {
            if (originalResponse == null)
            {
                throw new ArgumentNullException(nameof(originalResponse));
            }
            if (createOriginalHttpMessage == null)
            {
                throw new ArgumentNullException(nameof(createOriginalHttpMessage));
            }

            return ArmOperationHelpers.Create(_pipeline, _clientDiagnostics, originalResponse, RequestMethod.Post, "NetworkWatchersClient.GetTroubleshooting", OperationFinalStateVia.Location, createOriginalHttpMessage,
            (response, cancellationToken) =>
            {
                using var document = JsonDocument.Parse(response.ContentStream);
                if (document.RootElement.ValueKind == JsonValueKind.Null)
                {
                    return null;
                }
                else
                {
                    return TroubleshootingResult.DeserializeTroubleshootingResult(document.RootElement);
                }
            },
            async (response, cancellationToken) =>
            {
                using var document = await JsonDocument.ParseAsync(response.ContentStream, default, cancellationToken).ConfigureAwait(false);
                if (document.RootElement.ValueKind == JsonValueKind.Null)
                {
                    return null;
                }
                else
                {
                    return TroubleshootingResult.DeserializeTroubleshootingResult(document.RootElement);
                }
            });
        }

        /// <summary> Initiate troubleshooting on a specified resource. </summary>
        /// <param name="resourceGroupName"> The name of the resource group. </param>
        /// <param name="networkWatcherName"> The name of the network watcher resource. </param>
        /// <param name="parameters"> Parameters that define the resource to troubleshoot. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        public virtual async ValueTask<Operation<TroubleshootingResult>> StartGetTroubleshootingAsync(string resourceGroupName, string networkWatcherName, TroubleshootingParameters parameters, CancellationToken cancellationToken = default)
        {
            if (resourceGroupName == null)
            {
                throw new ArgumentNullException(nameof(resourceGroupName));
            }
            if (networkWatcherName == null)
            {
                throw new ArgumentNullException(nameof(networkWatcherName));
            }
            if (parameters == null)
            {
                throw new ArgumentNullException(nameof(parameters));
            }

            var originalResponse = await RestClient.GetTroubleshootingAsync(resourceGroupName, networkWatcherName, parameters, cancellationToken).ConfigureAwait(false);
            return CreateGetTroubleshooting(originalResponse, () => RestClient.CreateGetTroubleshootingRequest(resourceGroupName, networkWatcherName, parameters));
        }

        /// <summary> Initiate troubleshooting on a specified resource. </summary>
        /// <param name="resourceGroupName"> The name of the resource group. </param>
        /// <param name="networkWatcherName"> The name of the network watcher resource. </param>
        /// <param name="parameters"> Parameters that define the resource to troubleshoot. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        public virtual Operation<TroubleshootingResult> StartGetTroubleshooting(string resourceGroupName, string networkWatcherName, TroubleshootingParameters parameters, CancellationToken cancellationToken = default)
        {
            if (resourceGroupName == null)
            {
                throw new ArgumentNullException(nameof(resourceGroupName));
            }
            if (networkWatcherName == null)
            {
                throw new ArgumentNullException(nameof(networkWatcherName));
            }
            if (parameters == null)
            {
                throw new ArgumentNullException(nameof(parameters));
            }

            var originalResponse = RestClient.GetTroubleshooting(resourceGroupName, networkWatcherName, parameters, cancellationToken);
            return CreateGetTroubleshooting(originalResponse, () => RestClient.CreateGetTroubleshootingRequest(resourceGroupName, networkWatcherName, parameters));
        }

        /// <summary> Get the last completed troubleshooting result on a specified resource. </summary>
        /// <param name="originalResponse"> The original response from starting the operation. </param>
        /// <param name="createOriginalHttpMessage"> Creates the HTTP message used for the original request. </param>
        internal Operation<TroubleshootingResult> CreateGetTroubleshootingResult(Response originalResponse, Func<HttpMessage> createOriginalHttpMessage)
        {
            if (originalResponse == null)
            {
                throw new ArgumentNullException(nameof(originalResponse));
            }
            if (createOriginalHttpMessage == null)
            {
                throw new ArgumentNullException(nameof(createOriginalHttpMessage));
            }

            return ArmOperationHelpers.Create(_pipeline, _clientDiagnostics, originalResponse, RequestMethod.Post, "NetworkWatchersClient.GetTroubleshootingResult", OperationFinalStateVia.Location, createOriginalHttpMessage,
            (response, cancellationToken) =>
            {
                using var document = JsonDocument.Parse(response.ContentStream);
                if (document.RootElement.ValueKind == JsonValueKind.Null)
                {
                    return null;
                }
                else
                {
                    return TroubleshootingResult.DeserializeTroubleshootingResult(document.RootElement);
                }
            },
            async (response, cancellationToken) =>
            {
                using var document = await JsonDocument.ParseAsync(response.ContentStream, default, cancellationToken).ConfigureAwait(false);
                if (document.RootElement.ValueKind == JsonValueKind.Null)
                {
                    return null;
                }
                else
                {
                    return TroubleshootingResult.DeserializeTroubleshootingResult(document.RootElement);
                }
            });
        }

        /// <summary> Get the last completed troubleshooting result on a specified resource. </summary>
        /// <param name="resourceGroupName"> The name of the resource group. </param>
        /// <param name="networkWatcherName"> The name of the network watcher resource. </param>
        /// <param name="targetResourceId"> The target resource ID to query the troubleshooting result. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        public virtual async ValueTask<Operation<TroubleshootingResult>> StartGetTroubleshootingResultAsync(string resourceGroupName, string networkWatcherName, string targetResourceId, CancellationToken cancellationToken = default)
        {
            if (resourceGroupName == null)
            {
                throw new ArgumentNullException(nameof(resourceGroupName));
            }
            if (networkWatcherName == null)
            {
                throw new ArgumentNullException(nameof(networkWatcherName));
            }
            if (targetResourceId == null)
            {
                throw new ArgumentNullException(nameof(targetResourceId));
            }

            var originalResponse = await RestClient.GetTroubleshootingResultAsync(resourceGroupName, networkWatcherName, targetResourceId, cancellationToken).ConfigureAwait(false);
            return CreateGetTroubleshootingResult(originalResponse, () => RestClient.CreateGetTroubleshootingResultRequest(resourceGroupName, networkWatcherName, targetResourceId));
        }

        /// <summary> Get the last completed troubleshooting result on a specified resource. </summary>
        /// <param name="resourceGroupName"> The name of the resource group. </param>
        /// <param name="networkWatcherName"> The name of the network watcher resource. </param>
        /// <param name="targetResourceId"> The target resource ID to query the troubleshooting result. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        public virtual Operation<TroubleshootingResult> StartGetTroubleshootingResult(string resourceGroupName, string networkWatcherName, string targetResourceId, CancellationToken cancellationToken = default)
        {
            if (resourceGroupName == null)
            {
                throw new ArgumentNullException(nameof(resourceGroupName));
            }
            if (networkWatcherName == null)
            {
                throw new ArgumentNullException(nameof(networkWatcherName));
            }
            if (targetResourceId == null)
            {
                throw new ArgumentNullException(nameof(targetResourceId));
            }

            var originalResponse = RestClient.GetTroubleshootingResult(resourceGroupName, networkWatcherName, targetResourceId, cancellationToken);
            return CreateGetTroubleshootingResult(originalResponse, () => RestClient.CreateGetTroubleshootingResultRequest(resourceGroupName, networkWatcherName, targetResourceId));
        }

        /// <summary> Configures flow log and traffic analytics (optional) on a specified resource. </summary>
        /// <param name="originalResponse"> The original response from starting the operation. </param>
        /// <param name="createOriginalHttpMessage"> Creates the HTTP message used for the original request. </param>
        internal Operation<FlowLogInformation> CreateSetFlowLogConfiguration(Response originalResponse, Func<HttpMessage> createOriginalHttpMessage)
        {
            if (originalResponse == null)
            {
                throw new ArgumentNullException(nameof(originalResponse));
            }
            if (createOriginalHttpMessage == null)
            {
                throw new ArgumentNullException(nameof(createOriginalHttpMessage));
            }

            return ArmOperationHelpers.Create(_pipeline, _clientDiagnostics, originalResponse, RequestMethod.Post, "NetworkWatchersClient.SetFlowLogConfiguration", OperationFinalStateVia.Location, createOriginalHttpMessage,
            (response, cancellationToken) =>
            {
                using var document = JsonDocument.Parse(response.ContentStream);
                if (document.RootElement.ValueKind == JsonValueKind.Null)
                {
                    return null;
                }
                else
                {
                    return FlowLogInformation.DeserializeFlowLogInformation(document.RootElement);
                }
            },
            async (response, cancellationToken) =>
            {
                using var document = await JsonDocument.ParseAsync(response.ContentStream, default, cancellationToken).ConfigureAwait(false);
                if (document.RootElement.ValueKind == JsonValueKind.Null)
                {
                    return null;
                }
                else
                {
                    return FlowLogInformation.DeserializeFlowLogInformation(document.RootElement);
                }
            });
        }

        /// <summary> Configures flow log and traffic analytics (optional) on a specified resource. </summary>
        /// <param name="resourceGroupName"> The name of the network watcher resource group. </param>
        /// <param name="networkWatcherName"> The name of the network watcher resource. </param>
        /// <param name="parameters"> Parameters that define the configuration of flow log. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        public virtual async ValueTask<Operation<FlowLogInformation>> StartSetFlowLogConfigurationAsync(string resourceGroupName, string networkWatcherName, FlowLogInformation parameters, CancellationToken cancellationToken = default)
        {
            if (resourceGroupName == null)
            {
                throw new ArgumentNullException(nameof(resourceGroupName));
            }
            if (networkWatcherName == null)
            {
                throw new ArgumentNullException(nameof(networkWatcherName));
            }
            if (parameters == null)
            {
                throw new ArgumentNullException(nameof(parameters));
            }

            var originalResponse = await RestClient.SetFlowLogConfigurationAsync(resourceGroupName, networkWatcherName, parameters, cancellationToken).ConfigureAwait(false);
            return CreateSetFlowLogConfiguration(originalResponse, () => RestClient.CreateSetFlowLogConfigurationRequest(resourceGroupName, networkWatcherName, parameters));
        }

        /// <summary> Configures flow log and traffic analytics (optional) on a specified resource. </summary>
        /// <param name="resourceGroupName"> The name of the network watcher resource group. </param>
        /// <param name="networkWatcherName"> The name of the network watcher resource. </param>
        /// <param name="parameters"> Parameters that define the configuration of flow log. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        public virtual Operation<FlowLogInformation> StartSetFlowLogConfiguration(string resourceGroupName, string networkWatcherName, FlowLogInformation parameters, CancellationToken cancellationToken = default)
        {
            if (resourceGroupName == null)
            {
                throw new ArgumentNullException(nameof(resourceGroupName));
            }
            if (networkWatcherName == null)
            {
                throw new ArgumentNullException(nameof(networkWatcherName));
            }
            if (parameters == null)
            {
                throw new ArgumentNullException(nameof(parameters));
            }

            var originalResponse = RestClient.SetFlowLogConfiguration(resourceGroupName, networkWatcherName, parameters, cancellationToken);
            return CreateSetFlowLogConfiguration(originalResponse, () => RestClient.CreateSetFlowLogConfigurationRequest(resourceGroupName, networkWatcherName, parameters));
        }

        /// <summary> Queries status of flow log and traffic analytics (optional) on a specified resource. </summary>
        /// <param name="originalResponse"> The original response from starting the operation. </param>
        /// <param name="createOriginalHttpMessage"> Creates the HTTP message used for the original request. </param>
        internal Operation<FlowLogInformation> CreateGetFlowLogStatus(Response originalResponse, Func<HttpMessage> createOriginalHttpMessage)
        {
            if (originalResponse == null)
            {
                throw new ArgumentNullException(nameof(originalResponse));
            }
            if (createOriginalHttpMessage == null)
            {
                throw new ArgumentNullException(nameof(createOriginalHttpMessage));
            }

            return ArmOperationHelpers.Create(_pipeline, _clientDiagnostics, originalResponse, RequestMethod.Post, "NetworkWatchersClient.GetFlowLogStatus", OperationFinalStateVia.Location, createOriginalHttpMessage,
            (response, cancellationToken) =>
            {
                using var document = JsonDocument.Parse(response.ContentStream);
                if (document.RootElement.ValueKind == JsonValueKind.Null)
                {
                    return null;
                }
                else
                {
                    return FlowLogInformation.DeserializeFlowLogInformation(document.RootElement);
                }
            },
            async (response, cancellationToken) =>
            {
                using var document = await JsonDocument.ParseAsync(response.ContentStream, default, cancellationToken).ConfigureAwait(false);
                if (document.RootElement.ValueKind == JsonValueKind.Null)
                {
                    return null;
                }
                else
                {
                    return FlowLogInformation.DeserializeFlowLogInformation(document.RootElement);
                }
            });
        }

        /// <summary> Queries status of flow log and traffic analytics (optional) on a specified resource. </summary>
        /// <param name="resourceGroupName"> The name of the network watcher resource group. </param>
        /// <param name="networkWatcherName"> The name of the network watcher resource. </param>
        /// <param name="targetResourceId"> The target resource where getting the flow log and traffic analytics (optional) status. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        public virtual async ValueTask<Operation<FlowLogInformation>> StartGetFlowLogStatusAsync(string resourceGroupName, string networkWatcherName, string targetResourceId, CancellationToken cancellationToken = default)
        {
            if (resourceGroupName == null)
            {
                throw new ArgumentNullException(nameof(resourceGroupName));
            }
            if (networkWatcherName == null)
            {
                throw new ArgumentNullException(nameof(networkWatcherName));
            }
            if (targetResourceId == null)
            {
                throw new ArgumentNullException(nameof(targetResourceId));
            }

            var originalResponse = await RestClient.GetFlowLogStatusAsync(resourceGroupName, networkWatcherName, targetResourceId, cancellationToken).ConfigureAwait(false);
            return CreateGetFlowLogStatus(originalResponse, () => RestClient.CreateGetFlowLogStatusRequest(resourceGroupName, networkWatcherName, targetResourceId));
        }

        /// <summary> Queries status of flow log and traffic analytics (optional) on a specified resource. </summary>
        /// <param name="resourceGroupName"> The name of the network watcher resource group. </param>
        /// <param name="networkWatcherName"> The name of the network watcher resource. </param>
        /// <param name="targetResourceId"> The target resource where getting the flow log and traffic analytics (optional) status. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        public virtual Operation<FlowLogInformation> StartGetFlowLogStatus(string resourceGroupName, string networkWatcherName, string targetResourceId, CancellationToken cancellationToken = default)
        {
            if (resourceGroupName == null)
            {
                throw new ArgumentNullException(nameof(resourceGroupName));
            }
            if (networkWatcherName == null)
            {
                throw new ArgumentNullException(nameof(networkWatcherName));
            }
            if (targetResourceId == null)
            {
                throw new ArgumentNullException(nameof(targetResourceId));
            }

            var originalResponse = RestClient.GetFlowLogStatus(resourceGroupName, networkWatcherName, targetResourceId, cancellationToken);
            return CreateGetFlowLogStatus(originalResponse, () => RestClient.CreateGetFlowLogStatusRequest(resourceGroupName, networkWatcherName, targetResourceId));
        }

        /// <summary> Verifies the possibility of establishing a direct TCP connection from a virtual machine to a given endpoint including another VM or an arbitrary remote server. </summary>
        /// <param name="originalResponse"> The original response from starting the operation. </param>
        /// <param name="createOriginalHttpMessage"> Creates the HTTP message used for the original request. </param>
        internal Operation<ConnectivityInformation> CreateCheckConnectivity(Response originalResponse, Func<HttpMessage> createOriginalHttpMessage)
        {
            if (originalResponse == null)
            {
                throw new ArgumentNullException(nameof(originalResponse));
            }
            if (createOriginalHttpMessage == null)
            {
                throw new ArgumentNullException(nameof(createOriginalHttpMessage));
            }

            return ArmOperationHelpers.Create(_pipeline, _clientDiagnostics, originalResponse, RequestMethod.Post, "NetworkWatchersClient.CheckConnectivity", OperationFinalStateVia.Location, createOriginalHttpMessage,
            (response, cancellationToken) =>
            {
                using var document = JsonDocument.Parse(response.ContentStream);
                if (document.RootElement.ValueKind == JsonValueKind.Null)
                {
                    return null;
                }
                else
                {
                    return ConnectivityInformation.DeserializeConnectivityInformation(document.RootElement);
                }
            },
            async (response, cancellationToken) =>
            {
                using var document = await JsonDocument.ParseAsync(response.ContentStream, default, cancellationToken).ConfigureAwait(false);
                if (document.RootElement.ValueKind == JsonValueKind.Null)
                {
                    return null;
                }
                else
                {
                    return ConnectivityInformation.DeserializeConnectivityInformation(document.RootElement);
                }
            });
        }

        /// <summary> Verifies the possibility of establishing a direct TCP connection from a virtual machine to a given endpoint including another VM or an arbitrary remote server. </summary>
        /// <param name="resourceGroupName"> The name of the network watcher resource group. </param>
        /// <param name="networkWatcherName"> The name of the network watcher resource. </param>
        /// <param name="parameters"> Parameters that determine how the connectivity check will be performed. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        public virtual async ValueTask<Operation<ConnectivityInformation>> StartCheckConnectivityAsync(string resourceGroupName, string networkWatcherName, ConnectivityParameters parameters, CancellationToken cancellationToken = default)
        {
            if (resourceGroupName == null)
            {
                throw new ArgumentNullException(nameof(resourceGroupName));
            }
            if (networkWatcherName == null)
            {
                throw new ArgumentNullException(nameof(networkWatcherName));
            }
            if (parameters == null)
            {
                throw new ArgumentNullException(nameof(parameters));
            }

            var originalResponse = await RestClient.CheckConnectivityAsync(resourceGroupName, networkWatcherName, parameters, cancellationToken).ConfigureAwait(false);
            return CreateCheckConnectivity(originalResponse, () => RestClient.CreateCheckConnectivityRequest(resourceGroupName, networkWatcherName, parameters));
        }

        /// <summary> Verifies the possibility of establishing a direct TCP connection from a virtual machine to a given endpoint including another VM or an arbitrary remote server. </summary>
        /// <param name="resourceGroupName"> The name of the network watcher resource group. </param>
        /// <param name="networkWatcherName"> The name of the network watcher resource. </param>
        /// <param name="parameters"> Parameters that determine how the connectivity check will be performed. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        public virtual Operation<ConnectivityInformation> StartCheckConnectivity(string resourceGroupName, string networkWatcherName, ConnectivityParameters parameters, CancellationToken cancellationToken = default)
        {
            if (resourceGroupName == null)
            {
                throw new ArgumentNullException(nameof(resourceGroupName));
            }
            if (networkWatcherName == null)
            {
                throw new ArgumentNullException(nameof(networkWatcherName));
            }
            if (parameters == null)
            {
                throw new ArgumentNullException(nameof(parameters));
            }

            var originalResponse = RestClient.CheckConnectivity(resourceGroupName, networkWatcherName, parameters, cancellationToken);
            return CreateCheckConnectivity(originalResponse, () => RestClient.CreateCheckConnectivityRequest(resourceGroupName, networkWatcherName, parameters));
        }

        /// <summary> NOTE: This feature is currently in preview and still being tested for stability. Gets the relative latency score for internet service providers from a specified location to Azure regions. </summary>
        /// <param name="originalResponse"> The original response from starting the operation. </param>
        /// <param name="createOriginalHttpMessage"> Creates the HTTP message used for the original request. </param>
        internal Operation<AzureReachabilityReport> CreateGetAzureReachabilityReport(Response originalResponse, Func<HttpMessage> createOriginalHttpMessage)
        {
            if (originalResponse == null)
            {
                throw new ArgumentNullException(nameof(originalResponse));
            }
            if (createOriginalHttpMessage == null)
            {
                throw new ArgumentNullException(nameof(createOriginalHttpMessage));
            }

            return ArmOperationHelpers.Create(_pipeline, _clientDiagnostics, originalResponse, RequestMethod.Post, "NetworkWatchersClient.GetAzureReachabilityReport", OperationFinalStateVia.Location, createOriginalHttpMessage,
            (response, cancellationToken) =>
            {
                using var document = JsonDocument.Parse(response.ContentStream);
                if (document.RootElement.ValueKind == JsonValueKind.Null)
                {
                    return null;
                }
                else
                {
                    return AzureReachabilityReport.DeserializeAzureReachabilityReport(document.RootElement);
                }
            },
            async (response, cancellationToken) =>
            {
                using var document = await JsonDocument.ParseAsync(response.ContentStream, default, cancellationToken).ConfigureAwait(false);
                if (document.RootElement.ValueKind == JsonValueKind.Null)
                {
                    return null;
                }
                else
                {
                    return AzureReachabilityReport.DeserializeAzureReachabilityReport(document.RootElement);
                }
            });
        }

        /// <summary> NOTE: This feature is currently in preview and still being tested for stability. Gets the relative latency score for internet service providers from a specified location to Azure regions. </summary>
        /// <param name="resourceGroupName"> The name of the network watcher resource group. </param>
        /// <param name="networkWatcherName"> The name of the network watcher resource. </param>
        /// <param name="parameters"> Parameters that determine Azure reachability report configuration. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        public virtual async ValueTask<Operation<AzureReachabilityReport>> StartGetAzureReachabilityReportAsync(string resourceGroupName, string networkWatcherName, AzureReachabilityReportParameters parameters, CancellationToken cancellationToken = default)
        {
            if (resourceGroupName == null)
            {
                throw new ArgumentNullException(nameof(resourceGroupName));
            }
            if (networkWatcherName == null)
            {
                throw new ArgumentNullException(nameof(networkWatcherName));
            }
            if (parameters == null)
            {
                throw new ArgumentNullException(nameof(parameters));
            }

            var originalResponse = await RestClient.GetAzureReachabilityReportAsync(resourceGroupName, networkWatcherName, parameters, cancellationToken).ConfigureAwait(false);
            return CreateGetAzureReachabilityReport(originalResponse, () => RestClient.CreateGetAzureReachabilityReportRequest(resourceGroupName, networkWatcherName, parameters));
        }

        /// <summary> NOTE: This feature is currently in preview and still being tested for stability. Gets the relative latency score for internet service providers from a specified location to Azure regions. </summary>
        /// <param name="resourceGroupName"> The name of the network watcher resource group. </param>
        /// <param name="networkWatcherName"> The name of the network watcher resource. </param>
        /// <param name="parameters"> Parameters that determine Azure reachability report configuration. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        public virtual Operation<AzureReachabilityReport> StartGetAzureReachabilityReport(string resourceGroupName, string networkWatcherName, AzureReachabilityReportParameters parameters, CancellationToken cancellationToken = default)
        {
            if (resourceGroupName == null)
            {
                throw new ArgumentNullException(nameof(resourceGroupName));
            }
            if (networkWatcherName == null)
            {
                throw new ArgumentNullException(nameof(networkWatcherName));
            }
            if (parameters == null)
            {
                throw new ArgumentNullException(nameof(parameters));
            }

            var originalResponse = RestClient.GetAzureReachabilityReport(resourceGroupName, networkWatcherName, parameters, cancellationToken);
            return CreateGetAzureReachabilityReport(originalResponse, () => RestClient.CreateGetAzureReachabilityReportRequest(resourceGroupName, networkWatcherName, parameters));
        }

        /// <summary> NOTE: This feature is currently in preview and still being tested for stability. Lists all available internet service providers for a specified Azure region. </summary>
        /// <param name="originalResponse"> The original response from starting the operation. </param>
        /// <param name="createOriginalHttpMessage"> Creates the HTTP message used for the original request. </param>
        internal Operation<AvailableProvidersList> CreateListAvailableProviders(Response originalResponse, Func<HttpMessage> createOriginalHttpMessage)
        {
            if (originalResponse == null)
            {
                throw new ArgumentNullException(nameof(originalResponse));
            }
            if (createOriginalHttpMessage == null)
            {
                throw new ArgumentNullException(nameof(createOriginalHttpMessage));
            }

            return ArmOperationHelpers.Create(_pipeline, _clientDiagnostics, originalResponse, RequestMethod.Post, "NetworkWatchersClient.ListAvailableProviders", OperationFinalStateVia.Location, createOriginalHttpMessage,
            (response, cancellationToken) =>
            {
                using var document = JsonDocument.Parse(response.ContentStream);
                if (document.RootElement.ValueKind == JsonValueKind.Null)
                {
                    return null;
                }
                else
                {
                    return AvailableProvidersList.DeserializeAvailableProvidersList(document.RootElement);
                }
            },
            async (response, cancellationToken) =>
            {
                using var document = await JsonDocument.ParseAsync(response.ContentStream, default, cancellationToken).ConfigureAwait(false);
                if (document.RootElement.ValueKind == JsonValueKind.Null)
                {
                    return null;
                }
                else
                {
                    return AvailableProvidersList.DeserializeAvailableProvidersList(document.RootElement);
                }
            });
        }

        /// <summary> NOTE: This feature is currently in preview and still being tested for stability. Lists all available internet service providers for a specified Azure region. </summary>
        /// <param name="resourceGroupName"> The name of the network watcher resource group. </param>
        /// <param name="networkWatcherName"> The name of the network watcher resource. </param>
        /// <param name="parameters"> Parameters that scope the list of available providers. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        public virtual async ValueTask<Operation<AvailableProvidersList>> StartListAvailableProvidersAsync(string resourceGroupName, string networkWatcherName, AvailableProvidersListParameters parameters, CancellationToken cancellationToken = default)
        {
            if (resourceGroupName == null)
            {
                throw new ArgumentNullException(nameof(resourceGroupName));
            }
            if (networkWatcherName == null)
            {
                throw new ArgumentNullException(nameof(networkWatcherName));
            }
            if (parameters == null)
            {
                throw new ArgumentNullException(nameof(parameters));
            }

            var originalResponse = await RestClient.ListAvailableProvidersAsync(resourceGroupName, networkWatcherName, parameters, cancellationToken).ConfigureAwait(false);
            return CreateListAvailableProviders(originalResponse, () => RestClient.CreateListAvailableProvidersRequest(resourceGroupName, networkWatcherName, parameters));
        }

        /// <summary> NOTE: This feature is currently in preview and still being tested for stability. Lists all available internet service providers for a specified Azure region. </summary>
        /// <param name="resourceGroupName"> The name of the network watcher resource group. </param>
        /// <param name="networkWatcherName"> The name of the network watcher resource. </param>
        /// <param name="parameters"> Parameters that scope the list of available providers. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        public virtual Operation<AvailableProvidersList> StartListAvailableProviders(string resourceGroupName, string networkWatcherName, AvailableProvidersListParameters parameters, CancellationToken cancellationToken = default)
        {
            if (resourceGroupName == null)
            {
                throw new ArgumentNullException(nameof(resourceGroupName));
            }
            if (networkWatcherName == null)
            {
                throw new ArgumentNullException(nameof(networkWatcherName));
            }
            if (parameters == null)
            {
                throw new ArgumentNullException(nameof(parameters));
            }

            var originalResponse = RestClient.ListAvailableProviders(resourceGroupName, networkWatcherName, parameters, cancellationToken);
            return CreateListAvailableProviders(originalResponse, () => RestClient.CreateListAvailableProvidersRequest(resourceGroupName, networkWatcherName, parameters));
        }

        /// <summary> Gets Network Configuration Diagnostic data to help customers understand and debug network behavior. It provides detailed information on what security rules were applied to a specified traffic flow and the result of evaluating these rules. Customers must provide details of a flow like source, destination, protocol, etc. The API returns whether traffic was allowed or denied, the rules evaluated for the specified flow and the evaluation results. </summary>
        /// <param name="originalResponse"> The original response from starting the operation. </param>
        /// <param name="createOriginalHttpMessage"> Creates the HTTP message used for the original request. </param>
        internal Operation<NetworkConfigurationDiagnosticResponse> CreateGetNetworkConfigurationDiagnostic(Response originalResponse, Func<HttpMessage> createOriginalHttpMessage)
        {
            if (originalResponse == null)
            {
                throw new ArgumentNullException(nameof(originalResponse));
            }
            if (createOriginalHttpMessage == null)
            {
                throw new ArgumentNullException(nameof(createOriginalHttpMessage));
            }

            return ArmOperationHelpers.Create(_pipeline, _clientDiagnostics, originalResponse, RequestMethod.Post, "NetworkWatchersClient.GetNetworkConfigurationDiagnostic", OperationFinalStateVia.Location, createOriginalHttpMessage,
            (response, cancellationToken) =>
            {
                using var document = JsonDocument.Parse(response.ContentStream);
                if (document.RootElement.ValueKind == JsonValueKind.Null)
                {
                    return null;
                }
                else
                {
                    return NetworkConfigurationDiagnosticResponse.DeserializeNetworkConfigurationDiagnosticResponse(document.RootElement);
                }
            },
            async (response, cancellationToken) =>
            {
                using var document = await JsonDocument.ParseAsync(response.ContentStream, default, cancellationToken).ConfigureAwait(false);
                if (document.RootElement.ValueKind == JsonValueKind.Null)
                {
                    return null;
                }
                else
                {
                    return NetworkConfigurationDiagnosticResponse.DeserializeNetworkConfigurationDiagnosticResponse(document.RootElement);
                }
            });
        }

        /// <summary> Gets Network Configuration Diagnostic data to help customers understand and debug network behavior. It provides detailed information on what security rules were applied to a specified traffic flow and the result of evaluating these rules. Customers must provide details of a flow like source, destination, protocol, etc. The API returns whether traffic was allowed or denied, the rules evaluated for the specified flow and the evaluation results. </summary>
        /// <param name="resourceGroupName"> The name of the resource group. </param>
        /// <param name="networkWatcherName"> The name of the network watcher. </param>
        /// <param name="parameters"> Parameters to get network configuration diagnostic. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        public virtual async ValueTask<Operation<NetworkConfigurationDiagnosticResponse>> StartGetNetworkConfigurationDiagnosticAsync(string resourceGroupName, string networkWatcherName, NetworkConfigurationDiagnosticParameters parameters, CancellationToken cancellationToken = default)
        {
            if (resourceGroupName == null)
            {
                throw new ArgumentNullException(nameof(resourceGroupName));
            }
            if (networkWatcherName == null)
            {
                throw new ArgumentNullException(nameof(networkWatcherName));
            }
            if (parameters == null)
            {
                throw new ArgumentNullException(nameof(parameters));
            }

            var originalResponse = await RestClient.GetNetworkConfigurationDiagnosticAsync(resourceGroupName, networkWatcherName, parameters, cancellationToken).ConfigureAwait(false);
            return CreateGetNetworkConfigurationDiagnostic(originalResponse, () => RestClient.CreateGetNetworkConfigurationDiagnosticRequest(resourceGroupName, networkWatcherName, parameters));
        }

        /// <summary> Gets Network Configuration Diagnostic data to help customers understand and debug network behavior. It provides detailed information on what security rules were applied to a specified traffic flow and the result of evaluating these rules. Customers must provide details of a flow like source, destination, protocol, etc. The API returns whether traffic was allowed or denied, the rules evaluated for the specified flow and the evaluation results. </summary>
        /// <param name="resourceGroupName"> The name of the resource group. </param>
        /// <param name="networkWatcherName"> The name of the network watcher. </param>
        /// <param name="parameters"> Parameters to get network configuration diagnostic. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        public virtual Operation<NetworkConfigurationDiagnosticResponse> StartGetNetworkConfigurationDiagnostic(string resourceGroupName, string networkWatcherName, NetworkConfigurationDiagnosticParameters parameters, CancellationToken cancellationToken = default)
        {
            if (resourceGroupName == null)
            {
                throw new ArgumentNullException(nameof(resourceGroupName));
            }
            if (networkWatcherName == null)
            {
                throw new ArgumentNullException(nameof(networkWatcherName));
            }
            if (parameters == null)
            {
                throw new ArgumentNullException(nameof(parameters));
            }

            var originalResponse = RestClient.GetNetworkConfigurationDiagnostic(resourceGroupName, networkWatcherName, parameters, cancellationToken);
            return CreateGetNetworkConfigurationDiagnostic(originalResponse, () => RestClient.CreateGetNetworkConfigurationDiagnosticRequest(resourceGroupName, networkWatcherName, parameters));
        }
    }
}

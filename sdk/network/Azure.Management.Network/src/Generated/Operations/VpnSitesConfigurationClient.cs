// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.Collections.Generic;
using System.Threading;
using System.Threading.Tasks;
using Azure;
using Azure.Core;
using Azure.Core.Pipeline;

namespace Azure.Management.Network
{
    /// <summary> The VpnSitesConfiguration service client. </summary>
    public partial class VpnSitesConfigurationClient
    {
        private readonly ClientDiagnostics _clientDiagnostics;
        private readonly HttpPipeline _pipeline;
        internal VpnSitesConfigurationRestClient RestClient { get; }
        /// <summary> Initializes a new instance of VpnSitesConfigurationClient for mocking. </summary>
        protected VpnSitesConfigurationClient()
        {
        }

        /// <summary> Initializes a new instance of VpnSitesConfigurationClient. </summary>
        public VpnSitesConfigurationClient(string subscriptionId, TokenCredential tokenCredential, NetworkManagementClientOptions options = null)
        {
            options ??= new NetworkManagementClientOptions();
            _clientDiagnostics = new ClientDiagnostics(options);
            _pipeline = ManagementPipelineBuilder.Build(tokenCredential, options);
            RestClient = new VpnSitesConfigurationRestClient(_clientDiagnostics, _pipeline, subscriptionId: subscriptionId);
        }

        /// <summary> Gives the sas-url to download the configurations for vpn-sites in a resource group. </summary>
        /// <param name="originalResponse"> The original response from starting the operation. </param>
        /// <param name="createOriginalHttpMessage"> Creates the HTTP message used for the original request. </param>
        internal Operation<Response> CreateDownload(Response originalResponse, Func<HttpMessage> createOriginalHttpMessage)
        {
            if (originalResponse == null)
            {
                throw new ArgumentNullException(nameof(originalResponse));
            }
            if (createOriginalHttpMessage == null)
            {
                throw new ArgumentNullException(nameof(createOriginalHttpMessage));
            }

            return ArmOperationHelpers.Create(_pipeline, _clientDiagnostics, originalResponse, RequestMethod.Post, "VpnSitesConfigurationClient.Download", OperationFinalStateVia.Location, createOriginalHttpMessage);
        }

        /// <summary> Gives the sas-url to download the configurations for vpn-sites in a resource group. </summary>
        /// <param name="resourceGroupName"> The resource group name. </param>
        /// <param name="virtualWANName"> The name of the VirtualWAN for which configuration of all vpn-sites is needed. </param>
        /// <param name="outputBlobSasUrl"> The sas-url to download the configurations for vpn-sites. </param>
        /// <param name="vpnSites"> List of resource-ids of the vpn-sites for which config is to be downloaded. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        public virtual async ValueTask<Operation<Response>> StartDownloadAsync(string resourceGroupName, string virtualWANName, string outputBlobSasUrl, IEnumerable<string> vpnSites = null, CancellationToken cancellationToken = default)
        {
            if (resourceGroupName == null)
            {
                throw new ArgumentNullException(nameof(resourceGroupName));
            }
            if (virtualWANName == null)
            {
                throw new ArgumentNullException(nameof(virtualWANName));
            }
            if (outputBlobSasUrl == null)
            {
                throw new ArgumentNullException(nameof(outputBlobSasUrl));
            }

            var originalResponse = await RestClient.DownloadAsync(resourceGroupName, virtualWANName, outputBlobSasUrl, vpnSites, cancellationToken).ConfigureAwait(false);
            return CreateDownload(originalResponse, () => RestClient.CreateDownloadRequest(resourceGroupName, virtualWANName, outputBlobSasUrl, vpnSites));
        }

        /// <summary> Gives the sas-url to download the configurations for vpn-sites in a resource group. </summary>
        /// <param name="resourceGroupName"> The resource group name. </param>
        /// <param name="virtualWANName"> The name of the VirtualWAN for which configuration of all vpn-sites is needed. </param>
        /// <param name="outputBlobSasUrl"> The sas-url to download the configurations for vpn-sites. </param>
        /// <param name="vpnSites"> List of resource-ids of the vpn-sites for which config is to be downloaded. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        public virtual Operation<Response> StartDownload(string resourceGroupName, string virtualWANName, string outputBlobSasUrl, IEnumerable<string> vpnSites = null, CancellationToken cancellationToken = default)
        {
            if (resourceGroupName == null)
            {
                throw new ArgumentNullException(nameof(resourceGroupName));
            }
            if (virtualWANName == null)
            {
                throw new ArgumentNullException(nameof(virtualWANName));
            }
            if (outputBlobSasUrl == null)
            {
                throw new ArgumentNullException(nameof(outputBlobSasUrl));
            }

            var originalResponse = RestClient.Download(resourceGroupName, virtualWANName, outputBlobSasUrl, vpnSites, cancellationToken);
            return CreateDownload(originalResponse, () => RestClient.CreateDownloadRequest(resourceGroupName, virtualWANName, outputBlobSasUrl, vpnSites));
        }
    }
}

// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.Threading;
using System.Threading.Tasks;
using Azure;
using Azure.Core;
using Azure.Core.Pipeline;
using Sample.Models;

namespace Sample
{
    public partial class ConfigurationsClient
    {
        private readonly ClientDiagnostics clientDiagnostics;
        private readonly HttpPipeline pipeline;
        internal ConfigurationsRestClient RestClient { get; }
        /// <summary> Initializes a new instance of ConfigurationsClient for mocking. </summary>
        protected ConfigurationsClient()
        {
        }
        /// <summary> Initializes a new instance of ConfigurationsClient. </summary>
        internal ConfigurationsClient(ClientDiagnostics clientDiagnostics, HttpPipeline pipeline, string subscriptionId, string host = "https://management.azure.com", string apiVersion = "2020-01-01")
        {
            RestClient = new ConfigurationsRestClient(clientDiagnostics, pipeline, subscriptionId, host, apiVersion);
            this.clientDiagnostics = clientDiagnostics;
            this.pipeline = pipeline;
        }

        /// <summary> Create/Overwrite Azure Advisor configuration and also delete all configurations of contained resource groups. </summary>
        /// <param name="configContract"> The Azure Advisor configuration data structure. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        public virtual async Task<Response<ConfigData>> CreateInSubscriptionAsync(ConfigData configContract, CancellationToken cancellationToken = default)
        {
            return await RestClient.CreateInSubscriptionAsync(configContract, cancellationToken).ConfigureAwait(false);
        }

        /// <summary> Create/Overwrite Azure Advisor configuration and also delete all configurations of contained resource groups. </summary>
        /// <param name="configContract"> The Azure Advisor configuration data structure. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        public virtual Response<ConfigData> CreateInSubscription(ConfigData configContract, CancellationToken cancellationToken = default)
        {
            return RestClient.CreateInSubscription(configContract, cancellationToken);
        }

        /// <summary> Create/Overwrite Azure Advisor configuration. </summary>
        /// <param name="resourceGroup"> The name of the Azure resource group. </param>
        /// <param name="configContract"> The Azure Advisor configuration data structure. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        public virtual async Task<Response<ConfigData>> CreateInResourceGroupAsync(string resourceGroup, ConfigData configContract, CancellationToken cancellationToken = default)
        {
            return await RestClient.CreateInResourceGroupAsync(resourceGroup, configContract, cancellationToken).ConfigureAwait(false);
        }

        /// <summary> Create/Overwrite Azure Advisor configuration. </summary>
        /// <param name="resourceGroup"> The name of the Azure resource group. </param>
        /// <param name="configContract"> The Azure Advisor configuration data structure. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        public virtual Response<ConfigData> CreateInResourceGroup(string resourceGroup, ConfigData configContract, CancellationToken cancellationToken = default)
        {
            return RestClient.CreateInResourceGroup(resourceGroup, configContract, cancellationToken);
        }

        /// <summary> Retrieve Azure Advisor configurations and also retrieve configurations of contained resource groups. </summary>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        public virtual AsyncPageable<ConfigData> ListBySubscriptionAsync(CancellationToken cancellationToken = default)
        {
            async Task<Page<ConfigData>> FirstPageFunc(int? pageSizeHint)
            {
                var response = await RestClient.ListBySubscriptionAsync(cancellationToken).ConfigureAwait(false);
                return Page.FromValues(response.Value.Value, response.Value.NextLink, response.GetRawResponse());
            }
            async Task<Page<ConfigData>> NextPageFunc(string nextLink, int? pageSizeHint)
            {
                var response = await RestClient.ListBySubscriptionNextPageAsync(nextLink, cancellationToken).ConfigureAwait(false);
                return Page.FromValues(response.Value.Value, response.Value.NextLink, response.GetRawResponse());
            }
            return PageableHelpers.CreateAsyncEnumerable(FirstPageFunc, NextPageFunc);
        }

        /// <summary> Retrieve Azure Advisor configurations and also retrieve configurations of contained resource groups. </summary>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        public virtual Pageable<ConfigData> ListBySubscription(CancellationToken cancellationToken = default)
        {
            Page<ConfigData> FirstPageFunc(int? pageSizeHint)
            {
                var response = RestClient.ListBySubscription(cancellationToken);
                return Page.FromValues(response.Value.Value, response.Value.NextLink, response.GetRawResponse());
            }
            Page<ConfigData> NextPageFunc(string nextLink, int? pageSizeHint)
            {
                var response = RestClient.ListBySubscriptionNextPage(nextLink, cancellationToken);
                return Page.FromValues(response.Value.Value, response.Value.NextLink, response.GetRawResponse());
            }
            return PageableHelpers.CreateEnumerable(FirstPageFunc, NextPageFunc);
        }

        /// <summary> Retrieve Azure Advisor configurations. </summary>
        /// <param name="resourceGroup"> The name of the Azure resource group. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        public virtual AsyncPageable<ConfigData> ListByResourceGroupAsync(string resourceGroup, CancellationToken cancellationToken = default)
        {
            if (resourceGroup == null)
            {
                throw new ArgumentNullException(nameof(resourceGroup));
            }

            async Task<Page<ConfigData>> FirstPageFunc(int? pageSizeHint)
            {
                var response = await RestClient.ListByResourceGroupAsync(resourceGroup, cancellationToken).ConfigureAwait(false);
                return Page.FromValues(response.Value.Value, null, response.GetRawResponse());
            }
            async Task<Page<ConfigData>> NextPageFunc(string nextLink, int? pageSizeHint)
            {
                var response = await RestClient.ListByResourceGroupNextPageAsync(nextLink, cancellationToken).ConfigureAwait(false);
                return Page.FromValues(response.Value.Value, null, response.GetRawResponse());
            }
            return PageableHelpers.CreateAsyncEnumerable(FirstPageFunc, NextPageFunc);
        }

        /// <summary> Retrieve Azure Advisor configurations. </summary>
        /// <param name="resourceGroup"> The name of the Azure resource group. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        public virtual Pageable<ConfigData> ListByResourceGroup(string resourceGroup, CancellationToken cancellationToken = default)
        {
            if (resourceGroup == null)
            {
                throw new ArgumentNullException(nameof(resourceGroup));
            }

            Page<ConfigData> FirstPageFunc(int? pageSizeHint)
            {
                var response = RestClient.ListByResourceGroup(resourceGroup, cancellationToken);
                return Page.FromValues(response.Value.Value, null, response.GetRawResponse());
            }
            Page<ConfigData> NextPageFunc(string nextLink, int? pageSizeHint)
            {
                var response = RestClient.ListByResourceGroupNextPage(nextLink, cancellationToken);
                return Page.FromValues(response.Value.Value, null, response.GetRawResponse());
            }
            return PageableHelpers.CreateEnumerable(FirstPageFunc, NextPageFunc);
        }
    }
}

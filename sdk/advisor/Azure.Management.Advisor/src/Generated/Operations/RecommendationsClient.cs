// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.Threading;
using System.Threading.Tasks;
using Azure;
using Azure.Core;
using Azure.Core.Pipeline;
using Sample.Models;

namespace Sample
{
    public partial class RecommendationsClient
    {
        private readonly ClientDiagnostics clientDiagnostics;
        private readonly HttpPipeline pipeline;
        internal RecommendationsRestClient RestClient { get; }
        /// <summary> Initializes a new instance of RecommendationsClient for mocking. </summary>
        protected RecommendationsClient()
        {
        }
        /// <summary> Initializes a new instance of RecommendationsClient. </summary>
        internal RecommendationsClient(ClientDiagnostics clientDiagnostics, HttpPipeline pipeline, string subscriptionId, string host = "https://management.azure.com", string apiVersion = "2020-01-01")
        {
            RestClient = new RecommendationsRestClient(clientDiagnostics, pipeline, subscriptionId, host, apiVersion);
            this.clientDiagnostics = clientDiagnostics;
            this.pipeline = pipeline;
        }

        /// <summary> Initiates the recommendation generation or computation process for a subscription. This operation is asynchronous. The generated recommendations are stored in a cache in the Advisor service. </summary>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        public virtual async Task<Response> GenerateAsync(CancellationToken cancellationToken = default)
        {
            return (await RestClient.GenerateAsync(cancellationToken).ConfigureAwait(false)).GetRawResponse();
        }

        /// <summary> Initiates the recommendation generation or computation process for a subscription. This operation is asynchronous. The generated recommendations are stored in a cache in the Advisor service. </summary>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        public virtual Response Generate(CancellationToken cancellationToken = default)
        {
            return RestClient.Generate(cancellationToken).GetRawResponse();
        }

        /// <summary> Retrieves the status of the recommendation computation or generation process. Invoke this API after calling the generation recommendation. The URI of this API is returned in the Location field of the response header. </summary>
        /// <param name="operationId"> The operation ID, which can be found from the Location field in the generate recommendation response header. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        public virtual async Task<Response> GetGenerateStatusAsync(Guid operationId, CancellationToken cancellationToken = default)
        {
            return await RestClient.GetGenerateStatusAsync(operationId, cancellationToken).ConfigureAwait(false);
        }

        /// <summary> Retrieves the status of the recommendation computation or generation process. Invoke this API after calling the generation recommendation. The URI of this API is returned in the Location field of the response header. </summary>
        /// <param name="operationId"> The operation ID, which can be found from the Location field in the generate recommendation response header. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        public virtual Response GetGenerateStatus(Guid operationId, CancellationToken cancellationToken = default)
        {
            return RestClient.GetGenerateStatus(operationId, cancellationToken);
        }

        /// <summary> Obtains details of a cached recommendation. </summary>
        /// <param name="resourceUri"> The fully qualified Azure Resource Manager identifier of the resource to which the recommendation applies. </param>
        /// <param name="recommendationId"> The recommendation ID. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        public virtual async Task<Response<ResourceRecommendationBase>> GetAsync(string resourceUri, string recommendationId, CancellationToken cancellationToken = default)
        {
            return await RestClient.GetAsync(resourceUri, recommendationId, cancellationToken).ConfigureAwait(false);
        }

        /// <summary> Obtains details of a cached recommendation. </summary>
        /// <param name="resourceUri"> The fully qualified Azure Resource Manager identifier of the resource to which the recommendation applies. </param>
        /// <param name="recommendationId"> The recommendation ID. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        public virtual Response<ResourceRecommendationBase> Get(string resourceUri, string recommendationId, CancellationToken cancellationToken = default)
        {
            return RestClient.Get(resourceUri, recommendationId, cancellationToken);
        }

        /// <summary> Obtains cached recommendations for a subscription. The recommendations are generated or computed by invoking generateRecommendations. </summary>
        /// <param name="filter"> The filter to apply to the recommendations. </param>
        /// <param name="top"> The number of recommendations per page if a paged version of this API is being used. </param>
        /// <param name="skipToken"> The page-continuation token to use with a paged version of this API. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        public virtual AsyncPageable<ResourceRecommendationBase> ListAsync(string filter, int? top, string skipToken, CancellationToken cancellationToken = default)
        {
            async Task<Page<ResourceRecommendationBase>> FirstPageFunc(int? pageSizeHint)
            {
                var response = await RestClient.ListAsync(filter, top, skipToken, cancellationToken).ConfigureAwait(false);
                return Page.FromValues(response.Value.Value, response.Value.NextLink, response.GetRawResponse());
            }
            async Task<Page<ResourceRecommendationBase>> NextPageFunc(string nextLink, int? pageSizeHint)
            {
                var response = await RestClient.ListNextPageAsync(nextLink, cancellationToken).ConfigureAwait(false);
                return Page.FromValues(response.Value.Value, response.Value.NextLink, response.GetRawResponse());
            }
            return PageableHelpers.CreateAsyncEnumerable(FirstPageFunc, NextPageFunc);
        }

        /// <summary> Obtains cached recommendations for a subscription. The recommendations are generated or computed by invoking generateRecommendations. </summary>
        /// <param name="filter"> The filter to apply to the recommendations. </param>
        /// <param name="top"> The number of recommendations per page if a paged version of this API is being used. </param>
        /// <param name="skipToken"> The page-continuation token to use with a paged version of this API. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        public virtual Pageable<ResourceRecommendationBase> List(string filter, int? top, string skipToken, CancellationToken cancellationToken = default)
        {
            Page<ResourceRecommendationBase> FirstPageFunc(int? pageSizeHint)
            {
                var response = RestClient.List(filter, top, skipToken, cancellationToken);
                return Page.FromValues(response.Value.Value, response.Value.NextLink, response.GetRawResponse());
            }
            Page<ResourceRecommendationBase> NextPageFunc(string nextLink, int? pageSizeHint)
            {
                var response = RestClient.ListNextPage(nextLink, cancellationToken);
                return Page.FromValues(response.Value.Value, response.Value.NextLink, response.GetRawResponse());
            }
            return PageableHelpers.CreateEnumerable(FirstPageFunc, NextPageFunc);
        }
    }
}

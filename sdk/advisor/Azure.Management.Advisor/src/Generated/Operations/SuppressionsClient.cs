// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System.Threading;
using System.Threading.Tasks;
using Azure;
using Azure.Core;
using Azure.Core.Pipeline;
using Sample.Models;

namespace Sample
{
    public partial class SuppressionsClient
    {
        private readonly ClientDiagnostics clientDiagnostics;
        private readonly HttpPipeline pipeline;
        internal SuppressionsRestClient RestClient { get; }
        /// <summary> Initializes a new instance of SuppressionsClient for mocking. </summary>
        protected SuppressionsClient()
        {
        }
        /// <summary> Initializes a new instance of SuppressionsClient. </summary>
        internal SuppressionsClient(ClientDiagnostics clientDiagnostics, HttpPipeline pipeline, string subscriptionId, string host = "https://management.azure.com", string apiVersion = "2020-01-01")
        {
            RestClient = new SuppressionsRestClient(clientDiagnostics, pipeline, subscriptionId, host, apiVersion);
            this.clientDiagnostics = clientDiagnostics;
            this.pipeline = pipeline;
        }

        /// <summary> Obtains the details of a suppression. </summary>
        /// <param name="resourceUri"> The fully qualified Azure Resource Manager identifier of the resource to which the recommendation applies. </param>
        /// <param name="recommendationId"> The recommendation ID. </param>
        /// <param name="name"> The name of the suppression. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        public virtual async Task<Response<SuppressionContract>> GetAsync(string resourceUri, string recommendationId, string name, CancellationToken cancellationToken = default)
        {
            return await RestClient.GetAsync(resourceUri, recommendationId, name, cancellationToken).ConfigureAwait(false);
        }

        /// <summary> Obtains the details of a suppression. </summary>
        /// <param name="resourceUri"> The fully qualified Azure Resource Manager identifier of the resource to which the recommendation applies. </param>
        /// <param name="recommendationId"> The recommendation ID. </param>
        /// <param name="name"> The name of the suppression. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        public virtual Response<SuppressionContract> Get(string resourceUri, string recommendationId, string name, CancellationToken cancellationToken = default)
        {
            return RestClient.Get(resourceUri, recommendationId, name, cancellationToken);
        }

        /// <summary> Enables the snoozed or dismissed attribute of a recommendation. The snoozed or dismissed attribute is referred to as a suppression. Use this API to create or update the snoozed or dismissed status of a recommendation. </summary>
        /// <param name="resourceUri"> The fully qualified Azure Resource Manager identifier of the resource to which the recommendation applies. </param>
        /// <param name="recommendationId"> The recommendation ID. </param>
        /// <param name="name"> The name of the suppression. </param>
        /// <param name="suppressionContract"> The snoozed or dismissed attribute; for example, the snooze duration. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        public virtual async Task<Response<SuppressionContract>> CreateAsync(string resourceUri, string recommendationId, string name, SuppressionContract suppressionContract, CancellationToken cancellationToken = default)
        {
            return await RestClient.CreateAsync(resourceUri, recommendationId, name, suppressionContract, cancellationToken).ConfigureAwait(false);
        }

        /// <summary> Enables the snoozed or dismissed attribute of a recommendation. The snoozed or dismissed attribute is referred to as a suppression. Use this API to create or update the snoozed or dismissed status of a recommendation. </summary>
        /// <param name="resourceUri"> The fully qualified Azure Resource Manager identifier of the resource to which the recommendation applies. </param>
        /// <param name="recommendationId"> The recommendation ID. </param>
        /// <param name="name"> The name of the suppression. </param>
        /// <param name="suppressionContract"> The snoozed or dismissed attribute; for example, the snooze duration. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        public virtual Response<SuppressionContract> Create(string resourceUri, string recommendationId, string name, SuppressionContract suppressionContract, CancellationToken cancellationToken = default)
        {
            return RestClient.Create(resourceUri, recommendationId, name, suppressionContract, cancellationToken);
        }

        /// <summary> Enables the activation of a snoozed or dismissed recommendation. The snoozed or dismissed attribute of a recommendation is referred to as a suppression. </summary>
        /// <param name="resourceUri"> The fully qualified Azure Resource Manager identifier of the resource to which the recommendation applies. </param>
        /// <param name="recommendationId"> The recommendation ID. </param>
        /// <param name="name"> The name of the suppression. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        public virtual async Task<Response> DeleteAsync(string resourceUri, string recommendationId, string name, CancellationToken cancellationToken = default)
        {
            return await RestClient.DeleteAsync(resourceUri, recommendationId, name, cancellationToken).ConfigureAwait(false);
        }

        /// <summary> Enables the activation of a snoozed or dismissed recommendation. The snoozed or dismissed attribute of a recommendation is referred to as a suppression. </summary>
        /// <param name="resourceUri"> The fully qualified Azure Resource Manager identifier of the resource to which the recommendation applies. </param>
        /// <param name="recommendationId"> The recommendation ID. </param>
        /// <param name="name"> The name of the suppression. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        public virtual Response Delete(string resourceUri, string recommendationId, string name, CancellationToken cancellationToken = default)
        {
            return RestClient.Delete(resourceUri, recommendationId, name, cancellationToken);
        }

        /// <summary> Retrieves the list of snoozed or dismissed suppressions for a subscription. The snoozed or dismissed attribute of a recommendation is referred to as a suppression. </summary>
        /// <param name="top"> The number of suppressions per page if a paged version of this API is being used. </param>
        /// <param name="skipToken"> The page-continuation token to use with a paged version of this API. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        public virtual AsyncPageable<SuppressionContract> ListAsync(int? top, string skipToken, CancellationToken cancellationToken = default)
        {
            async Task<Page<SuppressionContract>> FirstPageFunc(int? pageSizeHint)
            {
                var response = await RestClient.ListAsync(top, skipToken, cancellationToken).ConfigureAwait(false);
                return Page.FromValues(response.Value.Value, response.Value.NextLink, response.GetRawResponse());
            }
            async Task<Page<SuppressionContract>> NextPageFunc(string nextLink, int? pageSizeHint)
            {
                var response = await RestClient.ListNextPageAsync(nextLink, cancellationToken).ConfigureAwait(false);
                return Page.FromValues(response.Value.Value, response.Value.NextLink, response.GetRawResponse());
            }
            return PageableHelpers.CreateAsyncEnumerable(FirstPageFunc, NextPageFunc);
        }

        /// <summary> Retrieves the list of snoozed or dismissed suppressions for a subscription. The snoozed or dismissed attribute of a recommendation is referred to as a suppression. </summary>
        /// <param name="top"> The number of suppressions per page if a paged version of this API is being used. </param>
        /// <param name="skipToken"> The page-continuation token to use with a paged version of this API. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        public virtual Pageable<SuppressionContract> List(int? top, string skipToken, CancellationToken cancellationToken = default)
        {
            Page<SuppressionContract> FirstPageFunc(int? pageSizeHint)
            {
                var response = RestClient.List(top, skipToken, cancellationToken);
                return Page.FromValues(response.Value.Value, response.Value.NextLink, response.GetRawResponse());
            }
            Page<SuppressionContract> NextPageFunc(string nextLink, int? pageSizeHint)
            {
                var response = RestClient.ListNextPage(nextLink, cancellationToken);
                return Page.FromValues(response.Value.Value, response.Value.NextLink, response.GetRawResponse());
            }
            return PageableHelpers.CreateEnumerable(FirstPageFunc, NextPageFunc);
        }
    }
}

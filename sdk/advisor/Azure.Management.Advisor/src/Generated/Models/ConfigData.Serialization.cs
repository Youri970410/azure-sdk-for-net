// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System.Collections.Generic;
using System.Text.Json;
using Azure.Core;

namespace Sample.Models
{
    public partial class ConfigData : IUtf8JsonSerializable
    {
        void IUtf8JsonSerializable.Write(Utf8JsonWriter writer)
        {
            writer.WriteStartObject();
            if (Id != null)
            {
                writer.WritePropertyName("id");
                writer.WriteStringValue(Id);
            }
            if (Name != null)
            {
                writer.WritePropertyName("name");
                writer.WriteStringValue(Name);
            }
            if (Type != null)
            {
                writer.WritePropertyName("type");
                writer.WriteStringValue(Type);
            }
            writer.WritePropertyName("properties");
            writer.WriteStartObject();
            if (Exclude != null)
            {
                writer.WritePropertyName("exclude");
                writer.WriteBooleanValue(Exclude.Value);
            }
            if (LowCpuThreshold != null)
            {
                writer.WritePropertyName("lowCpuThreshold");
                writer.WriteStringValue(LowCpuThreshold.Value.ToString());
            }
            if (Digests != null)
            {
                writer.WritePropertyName("digests");
                writer.WriteStartArray();
                foreach (var item in Digests)
                {
                    writer.WriteObjectValue(item);
                }
                writer.WriteEndArray();
            }
            writer.WriteEndObject();
            writer.WriteEndObject();
        }

        internal static ConfigData DeserializeConfigData(JsonElement element)
        {
            string id = default;
            string name = default;
            string type = default;
            bool? exclude = default;
            CpuThreshold? lowCpuThreshold = default;
            IList<DigestConfig> digests = default;
            foreach (var property in element.EnumerateObject())
            {
                if (property.NameEquals("id"))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        continue;
                    }
                    id = property.Value.GetString();
                    continue;
                }
                if (property.NameEquals("name"))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        continue;
                    }
                    name = property.Value.GetString();
                    continue;
                }
                if (property.NameEquals("type"))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        continue;
                    }
                    type = property.Value.GetString();
                    continue;
                }
                if (property.NameEquals("properties"))
                {
                    foreach (var property0 in property.Value.EnumerateObject())
                    {
                        if (property0.NameEquals("exclude"))
                        {
                            if (property0.Value.ValueKind == JsonValueKind.Null)
                            {
                                continue;
                            }
                            exclude = property0.Value.GetBoolean();
                            continue;
                        }
                        if (property0.NameEquals("lowCpuThreshold"))
                        {
                            if (property0.Value.ValueKind == JsonValueKind.Null)
                            {
                                continue;
                            }
                            lowCpuThreshold = new CpuThreshold(property0.Value.GetString());
                            continue;
                        }
                        if (property0.NameEquals("digests"))
                        {
                            if (property0.Value.ValueKind == JsonValueKind.Null)
                            {
                                continue;
                            }
                            List<DigestConfig> array = new List<DigestConfig>();
                            foreach (var item in property0.Value.EnumerateArray())
                            {
                                array.Add(DigestConfig.DeserializeDigestConfig(item));
                            }
                            digests = array;
                            continue;
                        }
                    }
                    continue;
                }
            }
            return new ConfigData(exclude, lowCpuThreshold, digests, id, name, type);
        }
    }
}

// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.Collections.Generic;
using System.Text.Json;
using Azure.Core;

namespace Sample.Models
{
    public partial class ResourceRecommendationBase : IUtf8JsonSerializable
    {
        void IUtf8JsonSerializable.Write(Utf8JsonWriter writer)
        {
            writer.WriteStartObject();
            if (Id != null)
            {
                writer.WritePropertyName("id");
                writer.WriteStringValue(Id);
            }
            if (Name != null)
            {
                writer.WritePropertyName("name");
                writer.WriteStringValue(Name);
            }
            if (Type != null)
            {
                writer.WritePropertyName("type");
                writer.WriteStringValue(Type);
            }
            writer.WritePropertyName("properties");
            writer.WriteStartObject();
            if (Category != null)
            {
                writer.WritePropertyName("category");
                writer.WriteStringValue(Category.Value.ToString());
            }
            if (Impact != null)
            {
                writer.WritePropertyName("impact");
                writer.WriteStringValue(Impact.Value.ToString());
            }
            if (ImpactedField != null)
            {
                writer.WritePropertyName("impactedField");
                writer.WriteStringValue(ImpactedField);
            }
            if (ImpactedValue != null)
            {
                writer.WritePropertyName("impactedValue");
                writer.WriteStringValue(ImpactedValue);
            }
            if (LastUpdated != null)
            {
                writer.WritePropertyName("lastUpdated");
                writer.WriteStringValue(LastUpdated.Value, "S");
            }
            if (Metadata != null)
            {
                writer.WritePropertyName("metadata");
                writer.WriteStartObject();
                foreach (var item in Metadata)
                {
                    writer.WritePropertyName(item.Key);
                    writer.WriteObjectValue(item.Value);
                }
                writer.WriteEndObject();
            }
            if (RecommendationTypeId != null)
            {
                writer.WritePropertyName("recommendationTypeId");
                writer.WriteStringValue(RecommendationTypeId);
            }
            if (Risk != null)
            {
                writer.WritePropertyName("risk");
                writer.WriteStringValue(Risk.Value.ToString());
            }
            if (ShortDescription != null)
            {
                writer.WritePropertyName("shortDescription");
                writer.WriteObjectValue(ShortDescription);
            }
            if (SuppressionIds != null)
            {
                writer.WritePropertyName("suppressionIds");
                writer.WriteStartArray();
                foreach (var item in SuppressionIds)
                {
                    writer.WriteStringValue(item);
                }
                writer.WriteEndArray();
            }
            if (ExtendedProperties != null)
            {
                writer.WritePropertyName("extendedProperties");
                writer.WriteStartObject();
                foreach (var item in ExtendedProperties)
                {
                    writer.WritePropertyName(item.Key);
                    writer.WriteStringValue(item.Value);
                }
                writer.WriteEndObject();
            }
            if (ResourceMetadata != null)
            {
                writer.WritePropertyName("resourceMetadata");
                writer.WriteObjectValue(ResourceMetadata);
            }
            writer.WriteEndObject();
            writer.WriteEndObject();
        }

        internal static ResourceRecommendationBase DeserializeResourceRecommendationBase(JsonElement element)
        {
            string id = default;
            string name = default;
            string type = default;
            Category? category = default;
            Impact? impact = default;
            string impactedField = default;
            string impactedValue = default;
            DateTimeOffset? lastUpdated = default;
            IDictionary<string, object> metadata = default;
            string recommendationTypeId = default;
            Risk? risk = default;
            ShortDescription shortDescription = default;
            IList<Guid> suppressionIds = default;
            IDictionary<string, string> extendedProperties = default;
            ResourceMetadata resourceMetadata = default;
            foreach (var property in element.EnumerateObject())
            {
                if (property.NameEquals("id"))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        continue;
                    }
                    id = property.Value.GetString();
                    continue;
                }
                if (property.NameEquals("name"))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        continue;
                    }
                    name = property.Value.GetString();
                    continue;
                }
                if (property.NameEquals("type"))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        continue;
                    }
                    type = property.Value.GetString();
                    continue;
                }
                if (property.NameEquals("properties"))
                {
                    foreach (var property0 in property.Value.EnumerateObject())
                    {
                        if (property0.NameEquals("category"))
                        {
                            if (property0.Value.ValueKind == JsonValueKind.Null)
                            {
                                continue;
                            }
                            category = new Category(property0.Value.GetString());
                            continue;
                        }
                        if (property0.NameEquals("impact"))
                        {
                            if (property0.Value.ValueKind == JsonValueKind.Null)
                            {
                                continue;
                            }
                            impact = new Impact(property0.Value.GetString());
                            continue;
                        }
                        if (property0.NameEquals("impactedField"))
                        {
                            if (property0.Value.ValueKind == JsonValueKind.Null)
                            {
                                continue;
                            }
                            impactedField = property0.Value.GetString();
                            continue;
                        }
                        if (property0.NameEquals("impactedValue"))
                        {
                            if (property0.Value.ValueKind == JsonValueKind.Null)
                            {
                                continue;
                            }
                            impactedValue = property0.Value.GetString();
                            continue;
                        }
                        if (property0.NameEquals("lastUpdated"))
                        {
                            if (property0.Value.ValueKind == JsonValueKind.Null)
                            {
                                continue;
                            }
                            lastUpdated = property0.Value.GetDateTimeOffset("S");
                            continue;
                        }
                        if (property0.NameEquals("metadata"))
                        {
                            if (property0.Value.ValueKind == JsonValueKind.Null)
                            {
                                continue;
                            }
                            Dictionary<string, object> dictionary = new Dictionary<string, object>();
                            foreach (var property1 in property0.Value.EnumerateObject())
                            {
                                dictionary.Add(property1.Name, property1.Value.GetObject());
                            }
                            metadata = dictionary;
                            continue;
                        }
                        if (property0.NameEquals("recommendationTypeId"))
                        {
                            if (property0.Value.ValueKind == JsonValueKind.Null)
                            {
                                continue;
                            }
                            recommendationTypeId = property0.Value.GetString();
                            continue;
                        }
                        if (property0.NameEquals("risk"))
                        {
                            if (property0.Value.ValueKind == JsonValueKind.Null)
                            {
                                continue;
                            }
                            risk = new Risk(property0.Value.GetString());
                            continue;
                        }
                        if (property0.NameEquals("shortDescription"))
                        {
                            if (property0.Value.ValueKind == JsonValueKind.Null)
                            {
                                continue;
                            }
                            shortDescription = ShortDescription.DeserializeShortDescription(property0.Value);
                            continue;
                        }
                        if (property0.NameEquals("suppressionIds"))
                        {
                            if (property0.Value.ValueKind == JsonValueKind.Null)
                            {
                                continue;
                            }
                            List<Guid> array = new List<Guid>();
                            foreach (var item in property0.Value.EnumerateArray())
                            {
                                array.Add(item.GetGuid());
                            }
                            suppressionIds = array;
                            continue;
                        }
                        if (property0.NameEquals("extendedProperties"))
                        {
                            if (property0.Value.ValueKind == JsonValueKind.Null)
                            {
                                continue;
                            }
                            Dictionary<string, string> dictionary = new Dictionary<string, string>();
                            foreach (var property1 in property0.Value.EnumerateObject())
                            {
                                dictionary.Add(property1.Name, property1.Value.GetString());
                            }
                            extendedProperties = dictionary;
                            continue;
                        }
                        if (property0.NameEquals("resourceMetadata"))
                        {
                            if (property0.Value.ValueKind == JsonValueKind.Null)
                            {
                                continue;
                            }
                            resourceMetadata = ResourceMetadata.DeserializeResourceMetadata(property0.Value);
                            continue;
                        }
                    }
                    continue;
                }
            }
            return new ResourceRecommendationBase(category, impact, impactedField, impactedValue, lastUpdated, metadata, recommendationTypeId, risk, shortDescription, suppressionIds, extendedProperties, resourceMetadata, id, name, type);
        }
    }
}

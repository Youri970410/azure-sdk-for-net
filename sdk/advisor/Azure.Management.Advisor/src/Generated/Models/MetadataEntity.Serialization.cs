// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System.Collections.Generic;
using System.Text.Json;
using Azure.Core;

namespace Sample.Models
{
    public partial class MetadataEntity
    {
        internal static MetadataEntity DeserializeMetadataEntity(JsonElement element)
        {
            string id = default;
            string type = default;
            string name = default;
            string displayName = default;
            IReadOnlyList<string> dependsOn = default;
            IReadOnlyList<string> applicableScenarios = default;
            IReadOnlyList<MetadataSupportedValueDetail> supportedValues = default;
            foreach (var property in element.EnumerateObject())
            {
                if (property.NameEquals("id"))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        continue;
                    }
                    id = property.Value.GetString();
                    continue;
                }
                if (property.NameEquals("type"))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        continue;
                    }
                    type = property.Value.GetString();
                    continue;
                }
                if (property.NameEquals("name"))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        continue;
                    }
                    name = property.Value.GetString();
                    continue;
                }
                if (property.NameEquals("properties"))
                {
                    foreach (var property0 in property.Value.EnumerateObject())
                    {
                        if (property0.NameEquals("displayName"))
                        {
                            if (property0.Value.ValueKind == JsonValueKind.Null)
                            {
                                continue;
                            }
                            displayName = property0.Value.GetString();
                            continue;
                        }
                        if (property0.NameEquals("dependsOn"))
                        {
                            if (property0.Value.ValueKind == JsonValueKind.Null)
                            {
                                continue;
                            }
                            List<string> array = new List<string>();
                            foreach (var item in property0.Value.EnumerateArray())
                            {
                                array.Add(item.GetString());
                            }
                            dependsOn = array;
                            continue;
                        }
                        if (property0.NameEquals("applicableScenarios"))
                        {
                            if (property0.Value.ValueKind == JsonValueKind.Null)
                            {
                                continue;
                            }
                            List<string> array = new List<string>();
                            foreach (var item in property0.Value.EnumerateArray())
                            {
                                array.Add(item.GetString());
                            }
                            applicableScenarios = array;
                            continue;
                        }
                        if (property0.NameEquals("supportedValues"))
                        {
                            if (property0.Value.ValueKind == JsonValueKind.Null)
                            {
                                continue;
                            }
                            List<MetadataSupportedValueDetail> array = new List<MetadataSupportedValueDetail>();
                            foreach (var item in property0.Value.EnumerateArray())
                            {
                                array.Add(MetadataSupportedValueDetail.DeserializeMetadataSupportedValueDetail(item));
                            }
                            supportedValues = array;
                            continue;
                        }
                    }
                    continue;
                }
            }
            return new MetadataEntity(id, type, name, displayName, dependsOn, applicableScenarios, supportedValues);
        }
    }
}

jobs:
  - job: Build
    variables:
      - template: ../variables/globals.yml
    pool:
      vmImage: windows-2019
    steps:
      - task: DotNetCoreInstaller@2
        displayName: "Use .NET Core sdk $(DotNetCoreSDKVersion)"
        inputs:
          version: "$(DotNetCoreSDKVersion)"
      - task: MSBuild@1
        inputs:
          solution: eng/mgmt.proj
          msbuildArguments: /t:CreateNugetPackage /p:PackageOutputPath=$(Build.ArtifactStagingDirectory) /p:Scope=${{parameters.Scope}}
        displayName: "Build and Package"
      - task: PublishPipelineArtifact@0
        condition: succeededOrFailed()
        inputs:
          artifactName: packages
          targetPath: $(Build.ArtifactStagingDirectory)
  - job: "Test"
    variables:
      - template: ../variables/globals.yml
    strategy:
      maxParallel: $[ variables['MaxParallelTestJobs'] ]
      matrix:
        Linux:
          OSName: "Linux"
          OSVmImage: "ubuntu-16.04"
        Windows:
          OSName: "Windows"
          OSVmImage: "windows-2019"
        MacOs:
          OSName: "MacOS"
          OSVmImage: "macOS-10.13"
    pool:
      vmImage: "$(OSVmImage)"
    steps:
      - task: DotNetCoreInstaller@2
        displayName: "Use .NET Core runtime $(DotNetCoreRuntimeVersion)"
        inputs:
          packageType: runtime
          version: "$(DotNetCoreRuntimeVersion)"
      - task: DotNetCoreInstaller@2
        displayName: "Use .NET Core sdk $(DotNetCoreSDKVersion)"
        inputs:
          packageType: sdk
          version: "$(DotNetCoreSDKVersion)"
      - task: MSBuild@1
        inputs:
          solution: eng/mgmt.proj
          msbuildArguments: /t:RunTests /p:PackageOutputPath=$(Build.ArtifactStagingDirectory) /p:Scope=${{parameters.Scope}}
        displayName: "Build & Test"
      - task: PublishTestResults@2
        condition: succeededOrFailed()
        inputs:
          testResultsFiles: "**/*.trx"
          testRunTitle: "$(OSName) Test Results"
          testResultsFormat: "VSTest"
          mergeTestResults: true
